class ItemProviderAdapterFactory {
public static void main (String[] args) {
//&&&staticSymbol&&&<%import java.util.*;%>
//&&&staticSymbol&&&<%import org.eclipse.emf.codegen.ecore.genmodel.*;%>
//&&&staticSymbol&&&<%include("../Header.javajetinc");%>
//&&&staticSymbol&&&<%include("ItemProvider/newChildDescriptorsAttributeDelegatedFeature.insert.javajetinc");%>
//&&&staticSymbol&&&<%include("ItemProvider/newChildDescriptorsAttributeFeature.insert.javajetinc");%>
//&&&staticSymbol&&&<%include("ItemProvider/newChildDescriptorsAttributeDelegatedFeature.override.javajetinc");%>
//&&&staticSymbol&&&<%include("ItemProvider/newChildDescriptorsAttributeFeature.override.javajetinc");%>
//&&&staticSymbol&&&<%include("ItemProvider/newChildDescriptorsReferenceDelegatedFeature.override.javajetinc");%>
//&&&staticSymbol&&&<%include("ItemProvider/newChildDescriptorsReferenceFeature.override.javajetinc");%>
//&&&staticSymbol&&&<%include("ItemProvider/newChildDescriptorsReferenceDelegatedFeature.insert.javajetinc");%>
//&&&staticSymbol&&&<%include("ItemProvider/newChildDescriptorsReferenceFeature.insert.javajetinc");%>
//&&&staticSymbol&&&<%

/**
 * Copyright (c) 2002-2010 IBM Corporation and others.
 * All rights reserved.   This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   IBM - Initial API and implementation
 */

//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
GenPackage genPackage = (GenPackage)argument; GenModel genModel=genPackage.getGenModel(); /* Trick to import java.util.* without warnings */Iterator.class.getName();
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&package <%
//&&&staticSymbol&&&=genPackage.getProviderPackageName()
//&&&staticSymbol&&&%>;
//&&&staticSymbol&&&
//&&&staticSymbol&&&<%
genModel.addImport("org.eclipse.emf.common.notify.Adapter");
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
genModel.addImport("org.eclipse.emf.common.notify.Notification");
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
genModel.addImport("org.eclipse.emf.common.notify.Notifier");
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
genModel.addImport("org.eclipse.emf.edit.provider.ChangeNotifier");
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
genModel.addImport("org.eclipse.emf.edit.provider.ComposeableAdapterFactory");
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
genModel.addImport("org.eclipse.emf.edit.provider.ComposedAdapterFactory");
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
genModel.addImport("org.eclipse.emf.edit.provider.IChangeNotifier");
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
genModel.addImport("org.eclipse.emf.edit.provider.IEditingDomainItemProvider");
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
genModel.addImport("org.eclipse.emf.edit.provider.IItemLabelProvider");
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
genModel.addImport("org.eclipse.emf.edit.provider.IItemPropertySource");
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
genModel.addImport("org.eclipse.emf.edit.provider.INotifyChangedListener");
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
genModel.addImport("org.eclipse.emf.edit.provider.IStructuredItemContentProvider");
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
genModel.addImport("org.eclipse.emf.edit.provider.ITreeItemContentProvider");
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
boolean useGenerics = genModel.useGenerics();
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
String _ArrayList = genModel.getImportedName(useGenerics ? "java.util.ArrayList<java.lang.Object>" : "java.util.ArrayList");
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
String _Collection = genModel.getImportedName(useGenerics ? "java.util.Collection<java.lang.Object>" : "java.util.Collection");
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
genModel.markImportLocation(stringBuffer);
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&
//&&&staticSymbol&&&/**
//&&&staticSymbol&&& * This is the factory that is used to provide the interfaces needed to support Viewers.
//&&&staticSymbol&&& * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
//&&&staticSymbol&&& * The adapters also support Eclipse property sheets.
//&&&staticSymbol&&& * Note that most of the adapters are shared among multiple instances.
//&&&staticSymbol&&& * <!-- begin-user-doc -->
//&&&staticSymbol&&& * <!-- end-user-doc -->
//&&&staticSymbol&&& * @generated
//&&&staticSymbol&&& */
//&&&staticSymbol&&&public class <%
//&&&staticSymbol&&&=genPackage.getItemProviderAdapterFactoryClassName()
//&&&staticSymbol&&&%> extends <%
//&&&staticSymbol&&&=genPackage.getImportedAdapterFactoryClassName()
//&&&staticSymbol&&&%> implements ComposeableAdapterFactory, IChangeNotifier<%
if (genPackage.isDisposableProviderFactory()) {
//&&&staticSymbol&&&%>, <%
//&&&staticSymbol&&&=genModel.getImportedName("org.eclipse.emf.edit.provider.IDisposable")
//&&&staticSymbol&&&%><%
}
//&&&staticSymbol&&&%><%
if (genPackage.isExtensibleProviderFactory()) {
//&&&staticSymbol&&&%>, <%
//&&&staticSymbol&&&=genModel.getImportedName("org.eclipse.emf.edit.provider.IChildCreationExtender")
//&&&staticSymbol&&&%><%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&{
//&&&staticSymbol&&&<%
if (genModel.hasCopyrightField()) {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	/**
//&&&staticSymbol&&&	 * <!-- begin-user-doc -->
//&&&staticSymbol&&&	 * <!-- end-user-doc -->
//&&&staticSymbol&&&	 * @generated
//&&&staticSymbol&&&	 */
//&&&staticSymbol&&&	public static final <%
//&&&staticSymbol&&&=genModel.getImportedName("java.lang.String")
//&&&staticSymbol&&&%> copyright = <%
//&&&staticSymbol&&&=genModel.getCopyrightFieldLiteral()
//&&&staticSymbol&&&%>;<%
//&&&staticSymbol&&&=genModel.getNonNLS()
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&
//&&&staticSymbol&&&<%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	/**
//&&&staticSymbol&&&	 * This keeps track of the root adapter factory that delegates to this adapter factory.
//&&&staticSymbol&&&	 * <!-- begin-user-doc -->
//&&&staticSymbol&&&	 * <!-- end-user-doc -->
//&&&staticSymbol&&&	 * @generated
//&&&staticSymbol&&&	 */
//&&&staticSymbol&&&	protected ComposedAdapterFactory parentAdapterFactory;
//&&&staticSymbol&&&
//&&&staticSymbol&&&	/**
//&&&staticSymbol&&&	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
//&&&staticSymbol&&&	 * <!-- begin-user-doc -->
//&&&staticSymbol&&&	 * <!-- end-user-doc -->
//&&&staticSymbol&&&	 * @generated
//&&&staticSymbol&&&	 */
//&&&staticSymbol&&&	protected IChangeNotifier changeNotifier = new ChangeNotifier();
//&&&staticSymbol&&&
//&&&staticSymbol&&&<%
if (genPackage.isDisposableProviderFactory() && genPackage.hasStatefulProvider()) {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	/**
//&&&staticSymbol&&&	 * This keeps track of all the item providers created, so that they can be {@link #dispose disposed}.
//&&&staticSymbol&&&	 * <!-- begin-user-doc -->
//&&&staticSymbol&&&	 * <!-- end-user-doc -->
//&&&staticSymbol&&&	 * @generated
//&&&staticSymbol&&&	 */
//&&&staticSymbol&&&	protected <%
//&&&staticSymbol&&&=genModel.getImportedName("org.eclipse.emf.edit.provider.Disposable")
//&&&staticSymbol&&&%> disposable = new Disposable();
//&&&staticSymbol&&&
//&&&staticSymbol&&&<%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
if (genPackage.isExtensibleProviderFactory()) {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	/**
//&&&staticSymbol&&&	 * This helps manage the child creation extenders.
//&&&staticSymbol&&&	 * <!-- begin-user-doc -->
//&&&staticSymbol&&&	 * <!-- end-user-doc -->
//&&&staticSymbol&&&	 * @generated
//&&&staticSymbol&&&	 */
//&&&staticSymbol&&&	protected <%
//&&&staticSymbol&&&=genModel.getImportedName("org.eclipse.emf.edit.provider.ChildCreationExtenderManager")
//&&&staticSymbol&&&%> childCreationExtenderManager = new <%
//&&&staticSymbol&&&=genModel.getImportedName("org.eclipse.emf.edit.provider.ChildCreationExtenderManager")
//&&&staticSymbol&&&%>(<%
//&&&staticSymbol&&&=genPackage.getImportedEditPluginClassName()
//&&&staticSymbol&&&%>.INSTANCE, <%
//&&&staticSymbol&&&=genPackage.getImportedPackageInterfaceName()
//&&&staticSymbol&&&%>.eNS_URI);
//&&&staticSymbol&&&
//&&&staticSymbol&&&<%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	/**
//&&&staticSymbol&&&	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
//&&&staticSymbol&&&	 * <!-- begin-user-doc -->
//&&&staticSymbol&&&	 * <!-- end-user-doc -->
//&&&staticSymbol&&&	 * @generated
//&&&staticSymbol&&&	 */
//&&&staticSymbol&&&	protected <%
//&&&staticSymbol&&&=_Collection
//&&&staticSymbol&&&%> supportedTypes = new <%
//&&&staticSymbol&&&=_ArrayList
//&&&staticSymbol&&&%>();
//&&&staticSymbol&&&
//&&&staticSymbol&&&	/**
//&&&staticSymbol&&&	 * This constructs an instance.
//&&&staticSymbol&&&	 * <!-- begin-user-doc -->
//&&&staticSymbol&&&	 * <!-- end-user-doc -->
//&&&staticSymbol&&&	 * @generated
//&&&staticSymbol&&&	 */
//&&&staticSymbol&&&	public <%
//&&&staticSymbol&&&=genPackage.getItemProviderAdapterFactoryClassName()
//&&&staticSymbol&&&%>()
//&&&staticSymbol&&&	{
//&&&staticSymbol&&&<%
for (String name : genPackage.getProviderSupportedTypes()) {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&		supportedTypes.add(<%
//&&&staticSymbol&&&=genModel.getImportedName(name)
//&&&staticSymbol&&&%>.class);
//&&&staticSymbol&&&<%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	}
//&&&staticSymbol&&&
//&&&staticSymbol&&&<%
for (GenPackage genDelegate : genPackage.getAdapterDelegatePackages()) {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	/**
//&&&staticSymbol&&&	 * This keeps track of the factory to which to delegate adapter creation for objects from that package.
//&&&staticSymbol&&&	 * <!-- begin-user-doc -->
//&&&staticSymbol&&&	 * <!-- end-user-doc -->
//&&&staticSymbol&&&	 * @generated
//&&&staticSymbol&&&	 */
//&&&staticSymbol&&&	protected <%
//&&&staticSymbol&&&=genDelegate.getImportedAdapterFactoryClassName()
//&&&staticSymbol&&&%> <%
//&&&staticSymbol&&&=genPackage.getUncapAdapterFactoryDelegateName(genDelegate)
//&&&staticSymbol&&&%> = null;
//&&&staticSymbol&&&
//&&&staticSymbol&&&	/**
//&&&staticSymbol&&&	 * This determines the delegate factory for the package.
//&&&staticSymbol&&&	 * <!-- begin-user-doc -->
//&&&staticSymbol&&&	 * <!-- end-user-doc -->
//&&&staticSymbol&&&	 * @generated
//&&&staticSymbol&&&	 */
//&&&staticSymbol&&&	protected <%
//&&&staticSymbol&&&=genDelegate.getImportedAdapterFactoryClassName()
//&&&staticSymbol&&&%> get<%
//&&&staticSymbol&&&=genPackage.getAdapterFactoryDelegateName(genDelegate)
//&&&staticSymbol&&&%>()
//&&&staticSymbol&&&	{
//&&&staticSymbol&&&		if (<%
//&&&staticSymbol&&&=genPackage.getUncapAdapterFactoryDelegateName(genDelegate)
//&&&staticSymbol&&&%> == null)
//&&&staticSymbol&&&		{
//&&&staticSymbol&&&			<%
//&&&staticSymbol&&&=genModel.getImportedName("org.eclipse.emf.common.notify.AdapterFactory")
//&&&staticSymbol&&&%> rootAdapterFactory = getRootAdapterFactory();
//&&&staticSymbol&&&			if (rootAdapterFactory instanceof ComposedAdapterFactory)
//&&&staticSymbol&&&			{
//&&&staticSymbol&&&				<%
//&&&staticSymbol&&&=genModel.getImportedName("org.eclipse.emf.common.notify.AdapterFactory")
//&&&staticSymbol&&&%> delegateAdapterFactory =
//&&&staticSymbol&&&					((ComposedAdapterFactory)rootAdapterFactory).getFactoryForType(<%
//&&&staticSymbol&&&=genDelegate.getImportedAdapterFactoryClassName()
//&&&staticSymbol&&&%>.getPackage());
//&&&staticSymbol&&&				if (delegateAdapterFactory instanceof <%
//&&&staticSymbol&&&=genDelegate.getImportedAdapterFactoryClassName()
//&&&staticSymbol&&&%>)
//&&&staticSymbol&&&				{
//&&&staticSymbol&&&					<%
//&&&staticSymbol&&&=genPackage.getUncapAdapterFactoryDelegateName(genDelegate)
//&&&staticSymbol&&&%> = (<%
//&&&staticSymbol&&&=genDelegate.getImportedAdapterFactoryClassName()
//&&&staticSymbol&&&%>)delegateAdapterFactory;
//&&&staticSymbol&&&				}
//&&&staticSymbol&&&			}
//&&&staticSymbol&&&		}
//&&&staticSymbol&&&		return <%
//&&&staticSymbol&&&=genPackage.getUncapAdapterFactoryDelegateName(genDelegate)
//&&&staticSymbol&&&%>;
//&&&staticSymbol&&&	}
//&&&staticSymbol&&&
//&&&staticSymbol&&&<%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
for (GenClass genClass : genPackage.getGenClasses()) {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
if (!genClass.isAbstract() && genClass.getProvider() != GenProviderKind.NONE_LITERAL) {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
if (genClass.isProviderSingleton()) {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	/**
//&&&staticSymbol&&&	 * This keeps track of the one adapter used for all {@link <%
//&&&staticSymbol&&&=genClass.getQualifiedInterfaceName()
//&&&staticSymbol&&&%>} instances.
//&&&staticSymbol&&&	 * <!-- begin-user-doc -->
//&&&staticSymbol&&&	 * <!-- end-user-doc -->
//&&&staticSymbol&&&	 * @generated
//&&&staticSymbol&&&	 */
//&&&staticSymbol&&&	protected <%
//&&&staticSymbol&&&=genClass.getProviderClassName()
//&&&staticSymbol&&&%> <%
//&&&staticSymbol&&&=genClass.getUncapName()
//&&&staticSymbol&&&%>ItemProvider;
//&&&staticSymbol&&&
//&&&staticSymbol&&&	/**
//&&&staticSymbol&&&	 * This creates an adapter for a {@link <%
//&&&staticSymbol&&&=genClass.getQualifiedInterfaceName()
//&&&staticSymbol&&&%>}.
//&&&staticSymbol&&&	 * <!-- begin-user-doc -->
//&&&staticSymbol&&&	 * <!-- end-user-doc -->
//&&&staticSymbol&&&	 * @generated
//&&&staticSymbol&&&	 */
//&&&staticSymbol&&&<%
if (genModel.useClassOverrideAnnotation()) {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	@Override
//&&&staticSymbol&&&<%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	public Adapter create<%
//&&&staticSymbol&&&=genClass.getName()
//&&&staticSymbol&&&%>Adapter()
//&&&staticSymbol&&&	{
//&&&staticSymbol&&&		if (<%
//&&&staticSymbol&&&=genClass.getUncapName()
//&&&staticSymbol&&&%>ItemProvider == null)
//&&&staticSymbol&&&		{
//&&&staticSymbol&&&			<%
//&&&staticSymbol&&&=genClass.getUncapName()
//&&&staticSymbol&&&%>ItemProvider = new <%
//&&&staticSymbol&&&=genClass.getProviderClassName()
//&&&staticSymbol&&&%>(this);
//&&&staticSymbol&&&		}
//&&&staticSymbol&&&
//&&&staticSymbol&&&		return <%
//&&&staticSymbol&&&=genClass.getUncapName()
//&&&staticSymbol&&&%>ItemProvider;
//&&&staticSymbol&&&	}
//&&&staticSymbol&&&
//&&&staticSymbol&&&<%
} else {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	/**
//&&&staticSymbol&&&	 * This creates an adapter for a {@link <%
//&&&staticSymbol&&&=genClass.getQualifiedInterfaceName()
//&&&staticSymbol&&&%>}.
//&&&staticSymbol&&&	 * <!-- begin-user-doc -->
//&&&staticSymbol&&&	 * <!-- end-user-doc -->
//&&&staticSymbol&&&	 * @generated
//&&&staticSymbol&&&	 */
//&&&staticSymbol&&&<%
if (genModel.useClassOverrideAnnotation()) {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	@Override
//&&&staticSymbol&&&<%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	public Adapter create<%
//&&&staticSymbol&&&=genClass.getName()
//&&&staticSymbol&&&%>Adapter()
//&&&staticSymbol&&&	{
//&&&staticSymbol&&&		return new <%
//&&&staticSymbol&&&=genClass.getProviderClassName()
//&&&staticSymbol&&&%>(this);
//&&&staticSymbol&&&	}
//&&&staticSymbol&&&
//&&&staticSymbol&&&<%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
for (GenClass genClass : genPackage.getAdapterDelegateSuperClasses()) {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	/**
//&&&staticSymbol&&&	 * <%
//&&&staticSymbol&&&=genClass.getName()
//&&&staticSymbol&&&%> of <%
//&&&staticSymbol&&&=genClass.getItemProviderAdapterFactoryClassName()
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	 * <!-- begin-user-doc -->
//&&&staticSymbol&&&	 * <!-- end-user-doc -->
//&&&staticSymbol&&&	 * @generated
//&&&staticSymbol&&&	 */
//&&&staticSymbol&&&	public Adapter create<%
//&&&staticSymbol&&&=genClass.getName()
//&&&staticSymbol&&&%>Adapter()
//&&&staticSymbol&&&	{
//&&&staticSymbol&&&		return
//&&&staticSymbol&&&			get<%
//&&&staticSymbol&&&=genClass.getItemProviderAdapterFactoryClassName()
//&&&staticSymbol&&&%>() == null ?
//&&&staticSymbol&&&				null :
//&&&staticSymbol&&&				get<%
//&&&staticSymbol&&&=genClass.getItemProviderAdapterFactoryClassName()
//&&&staticSymbol&&&%>().create<%
//&&&staticSymbol&&&=genClass.getName()
//&&&staticSymbol&&&%>Adapter();
//&&&staticSymbol&&&	}
//&&&staticSymbol&&&
//&&&staticSymbol&&&<%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	/**
//&&&staticSymbol&&&	 * This returns the root adapter factory that contains this factory.
//&&&staticSymbol&&&	 * <!-- begin-user-doc -->
//&&&staticSymbol&&&	 * <!-- end-user-doc -->
//&&&staticSymbol&&&	 * @generated
//&&&staticSymbol&&&	 */
//&&&staticSymbol&&&	public ComposeableAdapterFactory getRootAdapterFactory()
//&&&staticSymbol&&&	{
//&&&staticSymbol&&&		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
//&&&staticSymbol&&&	}
//&&&staticSymbol&&&
//&&&staticSymbol&&&	/**
//&&&staticSymbol&&&	 * This sets the composed adapter factory that contains this factory.
//&&&staticSymbol&&&	 * <!-- begin-user-doc -->
//&&&staticSymbol&&&	 * <!-- end-user-doc -->
//&&&staticSymbol&&&	 * @generated
//&&&staticSymbol&&&	 */
//&&&staticSymbol&&&	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory)
//&&&staticSymbol&&&	{
//&&&staticSymbol&&&		this.parentAdapterFactory = parentAdapterFactory;
//&&&staticSymbol&&&	}
//&&&staticSymbol&&&
//&&&staticSymbol&&&	/**
//&&&staticSymbol&&&	 * <!-- begin-user-doc -->
//&&&staticSymbol&&&	 * <!-- end-user-doc -->
//&&&staticSymbol&&&	 * @generated
//&&&staticSymbol&&&	 */
//&&&staticSymbol&&&<%
if (genModel.useClassOverrideAnnotation()) {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	@Override
//&&&staticSymbol&&&<%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	public boolean isFactoryForType(Object type)
//&&&staticSymbol&&&	{
//&&&staticSymbol&&&		return supportedTypes.contains(type) || super.isFactoryForType(type);
//&&&staticSymbol&&&	}
//&&&staticSymbol&&&
//&&&staticSymbol&&&	/**
//&&&staticSymbol&&&	 * This implementation substitutes the factory itself as the key for the adapter.
//&&&staticSymbol&&&	 * <!-- begin-user-doc -->
//&&&staticSymbol&&&	 * <!-- end-user-doc -->
//&&&staticSymbol&&&	 * @generated
//&&&staticSymbol&&&	 */
//&&&staticSymbol&&&<%
if (genModel.useClassOverrideAnnotation()) {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	@Override
//&&&staticSymbol&&&<%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	public Adapter adapt(Notifier notifier, Object type)
//&&&staticSymbol&&&	{
//&&&staticSymbol&&&		return super.adapt(notifier, this);
//&&&staticSymbol&&&	}
//&&&staticSymbol&&&
//&&&staticSymbol&&&	/**
//&&&staticSymbol&&&	 * <!-- begin-user-doc -->
//&&&staticSymbol&&&	 * <!-- end-user-doc -->
//&&&staticSymbol&&&	 * @generated
//&&&staticSymbol&&&	 */
//&&&staticSymbol&&&<%
if (genModel.useClassOverrideAnnotation()) {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	@Override
//&&&staticSymbol&&&<%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	public Object adapt(Object object, Object type)
//&&&staticSymbol&&&	{
//&&&staticSymbol&&&		if (isFactoryForType(type))
//&&&staticSymbol&&&		{
//&&&staticSymbol&&&			Object adapter = super.adapt(object, type);
//&&&staticSymbol&&&			if (!(type instanceof Class<%
if (genModel.useGenerics()) {
//&&&staticSymbol&&&%><?><%
}
//&&&staticSymbol&&&%>) || <%
if (genModel.getRuntimePlatform() == GenRuntimePlatform.GWT) {
//&&&staticSymbol&&&%><%
//&&&staticSymbol&&&=genModel.getImportedName("org.eclipse.emf.common.util.Reflect")
//&&&staticSymbol&&&%>.isInstance((Class<%
if (genModel.useGenerics()) {
//&&&staticSymbol&&&%><?><%
}
//&&&staticSymbol&&&%>)type, adapter)<%
} else {
//&&&staticSymbol&&&%>(((Class<%
if (genModel.useGenerics()) {
//&&&staticSymbol&&&%><?><%
}
//&&&staticSymbol&&&%>)type).isInstance(adapter))<%
}
//&&&staticSymbol&&&%>)
//&&&staticSymbol&&&			{
//&&&staticSymbol&&&				return adapter;
//&&&staticSymbol&&&			}
//&&&staticSymbol&&&		}
//&&&staticSymbol&&&
//&&&staticSymbol&&&		return null;
//&&&staticSymbol&&&	}
//&&&staticSymbol&&&
//&&&staticSymbol&&&<%
if (genPackage.isDisposableProviderFactory() && genPackage.hasStatefulProvider()) {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	/**
//&&&staticSymbol&&&	 * Associates an adapter with a notifier via the base implementation, then records it to ensure it will be disposed.
//&&&staticSymbol&&&	 * <!-- begin-user-doc -->
//&&&staticSymbol&&&	 * <!-- end-user-doc -->
//&&&staticSymbol&&&	 * @generated
//&&&staticSymbol&&&	 */
//&&&staticSymbol&&&<%
if (genModel.useClassOverrideAnnotation()) {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	@Override
//&&&staticSymbol&&&<%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	protected void associate(Adapter adapter, Notifier target)
//&&&staticSymbol&&&	{
//&&&staticSymbol&&&		super.associate(adapter, target);
//&&&staticSymbol&&&		if (adapter != null)
//&&&staticSymbol&&&		{
//&&&staticSymbol&&&			disposable.add(adapter);
//&&&staticSymbol&&&		}
//&&&staticSymbol&&&	}
//&&&staticSymbol&&&
//&&&staticSymbol&&&<%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
if (genPackage.isExtensibleProviderFactory()) {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	/**
//&&&staticSymbol&&&	 * <!-- begin-user-doc -->
//&&&staticSymbol&&&	 * <!-- end-user-doc -->
//&&&staticSymbol&&&	 * @generated
//&&&staticSymbol&&&	 */
//&&&staticSymbol&&&	public <%
//&&&staticSymbol&&&*%%storeSymbol%%*0
//&&&staticSymbol&&&%> getChildCreationExtenders()
//&&&staticSymbol&&&	{
//&&&staticSymbol&&&		return childCreationExtenderManager.getChildCreationExtenders();
//&&&staticSymbol&&&	}
//&&&staticSymbol&&&
//&&&staticSymbol&&&	/**
//&&&staticSymbol&&&	 * <!-- begin-user-doc -->
//&&&staticSymbol&&&	 * <!-- end-user-doc -->
//&&&staticSymbol&&&	 * @generated
//&&&staticSymbol&&&	 */
//&&&staticSymbol&&&	public <%
//&&&staticSymbol&&&*%%storeSymbol%%*1
//&&&staticSymbol&&&%> getNewChildDescriptors(Object object, <%
//&&&staticSymbol&&&=genModel.getImportedName("org.eclipse.emf.edit.domain.EditingDomain")
//&&&staticSymbol&&&%> editingDomain)
//&&&staticSymbol&&&	{
//&&&staticSymbol&&&		return childCreationExtenderManager.getNewChildDescriptors(object, editingDomain);
//&&&staticSymbol&&&	}
//&&&staticSymbol&&&
//&&&staticSymbol&&&	/**
//&&&staticSymbol&&&	 * <!-- begin-user-doc -->
//&&&staticSymbol&&&	 * <!-- end-user-doc -->
//&&&staticSymbol&&&	 * @generated
//&&&staticSymbol&&&	 */
//&&&staticSymbol&&&	public <%
//&&&staticSymbol&&&=genModel.getImportedName("org.eclipse.emf.common.util.ResourceLocator")
//&&&staticSymbol&&&%> getResourceLocator()
//&&&staticSymbol&&&	{
//&&&staticSymbol&&&		return childCreationExtenderManager;
//&&&staticSymbol&&&	}
//&&&staticSymbol&&&
//&&&staticSymbol&&&<%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	/**
//&&&staticSymbol&&&	 * This adds a listener.
//&&&staticSymbol&&&	 * <!-- begin-user-doc -->
//&&&staticSymbol&&&	 * <!-- end-user-doc -->
//&&&staticSymbol&&&	 * @generated
//&&&staticSymbol&&&	 */
//&&&staticSymbol&&&	public void addListener(INotifyChangedListener notifyChangedListener)
//&&&staticSymbol&&&	{
//&&&staticSymbol&&&		changeNotifier.addListener(notifyChangedListener);
//&&&staticSymbol&&&	}
//&&&staticSymbol&&&
//&&&staticSymbol&&&	/**
//&&&staticSymbol&&&	 * This removes a listener.
//&&&staticSymbol&&&	 * <!-- begin-user-doc -->
//&&&staticSymbol&&&	 * <!-- end-user-doc -->
//&&&staticSymbol&&&	 * @generated
//&&&staticSymbol&&&	 */
//&&&staticSymbol&&&	public void removeListener(INotifyChangedListener notifyChangedListener)
//&&&staticSymbol&&&	{
//&&&staticSymbol&&&		changeNotifier.removeListener(notifyChangedListener);
//&&&staticSymbol&&&	}
//&&&staticSymbol&&&
//&&&staticSymbol&&&	/**
//&&&staticSymbol&&&	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
//&&&staticSymbol&&&	 * <!-- begin-user-doc -->
//&&&staticSymbol&&&	 * <!-- end-user-doc -->
//&&&staticSymbol&&&	 * @generated
//&&&staticSymbol&&&	 */
//&&&staticSymbol&&&	public void fireNotifyChanged(Notification notification)
//&&&staticSymbol&&&	{
//&&&staticSymbol&&&		changeNotifier.fireNotifyChanged(notification);
//&&&staticSymbol&&&
//&&&staticSymbol&&&		if (parentAdapterFactory != null)
//&&&staticSymbol&&&		{
//&&&staticSymbol&&&			parentAdapterFactory.fireNotifyChanged(notification);
//&&&staticSymbol&&&		}
//&&&staticSymbol&&&	}
//&&&staticSymbol&&&
//&&&staticSymbol&&&<%
if (genPackage.isDisposableProviderFactory()) {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	/**
//&&&staticSymbol&&&	 * This disposes all of the item providers created by this factory. 
//&&&staticSymbol&&&	 * <!-- begin-user-doc -->
//&&&staticSymbol&&&	 * <!-- end-user-doc -->
//&&&staticSymbol&&&	 * @generated
//&&&staticSymbol&&&	 */
//&&&staticSymbol&&&	public void dispose()
//&&&staticSymbol&&&	{
//&&&staticSymbol&&&<%
if (genPackage.hasStatefulProvider()) {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&		disposable.dispose();
//&&&staticSymbol&&&<%
} else {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
for (GenClass genClass : genPackage.getGenClasses()) {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
if (!genClass.isAbstract() && genClass.isProviderSingleton()) {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&		if (<%
//&&&staticSymbol&&&=genClass.getUncapName()
//&&&staticSymbol&&&%>ItemProvider != null) <%
//&&&staticSymbol&&&=genClass.getUncapName()
//&&&staticSymbol&&&%>ItemProvider.dispose();
//&&&staticSymbol&&&<%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	}
//&&&staticSymbol&&&
//&&&staticSymbol&&&<%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
if (genPackage.isChildCreationExtenders()) {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&  <%
for (Map.Entry<GenPackage, Map<GenClass, List<GenClass.ChildCreationData>>> packageEntry : genPackage.getExtendedChildCreationData().entrySet()) {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	/**
//&&&staticSymbol&&&	 * A child creation extender for the {@link <%
//&&&staticSymbol&&&=packageEntry.getKey().getImportedPackageInterfaceName()
//&&&staticSymbol&&&%>}.
//&&&staticSymbol&&&	 * <!-- begin-user-doc -->
//&&&staticSymbol&&&	 * <!-- end-user-doc -->
//&&&staticSymbol&&&	 * @generated
//&&&staticSymbol&&&	 */
//&&&staticSymbol&&&	public static class <%
//&&&staticSymbol&&&=genPackage.getChildCreationExtenderName(packageEntry.getKey())
//&&&staticSymbol&&&%> implements <%
//&&&staticSymbol&&&=genModel.getImportedName("org.eclipse.emf.edit.provider.IChildCreationExtender")
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&	{
//&&&staticSymbol&&&		/**
//&&&staticSymbol&&&		 * The switch for creating child descriptors specific to each extended class.
//&&&staticSymbol&&&		 * <!-- begin-user-doc -->
//&&&staticSymbol&&&		 * <!-- end-user-doc -->
//&&&staticSymbol&&&		 * @generated
//&&&staticSymbol&&&		 */
//&&&staticSymbol&&&		protected static class CreationSwitch extends <%
//&&&staticSymbol&&&=genModel.getImportedName(packageEntry.getKey().getQualifiedSwitchClassName())
//&&&staticSymbol&&&%><%
//&&&staticSymbol&&&*%%storeSymbol%%*2
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&		{
//&&&staticSymbol&&&			/**
//&&&staticSymbol&&&			 * The child descriptors being populated.
//&&&staticSymbol&&&			 * <!-- begin-user-doc -->
//&&&staticSymbol&&&			 * <!-- end-user-doc -->
//&&&staticSymbol&&&			 * @generated
//&&&staticSymbol&&&			 */
//&&&staticSymbol&&&			protected <%
//&&&staticSymbol&&&*%%storeSymbol%%*3
//&&&staticSymbol&&&%> newChildDescriptors;
//&&&staticSymbol&&&
//&&&staticSymbol&&&			/**
//&&&staticSymbol&&&			 * The domain in which to create the children.
//&&&staticSymbol&&&			 * <!-- begin-user-doc -->
//&&&staticSymbol&&&			 * <!-- end-user-doc -->
//&&&staticSymbol&&&			 * @generated
//&&&staticSymbol&&&			 */
//&&&staticSymbol&&&			protected <%
//&&&staticSymbol&&&=genModel.getImportedName("org.eclipse.emf.edit.domain.EditingDomain")
//&&&staticSymbol&&&%> editingDomain;
//&&&staticSymbol&&&
//&&&staticSymbol&&&			/**
//&&&staticSymbol&&&			 * Creates the a switch for populating child descriptors in the given domain.
//&&&staticSymbol&&&			 * <!-- begin-user-doc -->
//&&&staticSymbol&&&			 * <!-- end-user-doc -->
//&&&staticSymbol&&&			 * @generated
//&&&staticSymbol&&&			 */
//&&&staticSymbol&&&			CreationSwitch(<%
//&&&staticSymbol&&&*%%storeSymbol%%*4
//&&&staticSymbol&&&%> newChildDescriptors, <%
//&&&staticSymbol&&&=genModel.getImportedName("org.eclipse.emf.edit.domain.EditingDomain")
//&&&staticSymbol&&&%> editingDomain) 
//&&&staticSymbol&&&			{
//&&&staticSymbol&&&				this.newChildDescriptors = newChildDescriptors;
//&&&staticSymbol&&&				this.editingDomain = editingDomain;
//&&&staticSymbol&&&			}
//&&&staticSymbol&&&     <%
for (Map.Entry<GenClass, List<GenClass.ChildCreationData>> classEntry : packageEntry.getValue().entrySet()) { GenClass genClass = classEntry.getKey();
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&			/**
//&&&staticSymbol&&&			 * <!-- begin-user-doc -->
//&&&staticSymbol&&&			 * <!-- end-user-doc -->
//&&&staticSymbol&&&			 * @generated
//&&&staticSymbol&&&			 */
//&&&staticSymbol&&&<%
if (genModel.useClassOverrideAnnotation()) {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&			@Override
//&&&staticSymbol&&&<%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&			public <%
//&&&staticSymbol&&&=genClass.getTypeParameters()
//&&&staticSymbol&&&%>Object case<%
//&&&staticSymbol&&&=genPackage.getClassUniqueName(genClass)
//&&&staticSymbol&&&%>(<%
//&&&staticSymbol&&&=genClass.getImportedInterfaceName()
//&&&staticSymbol&&&%><%
//&&&staticSymbol&&&=genClass.getInterfaceTypeArguments()
//&&&staticSymbol&&&%> object)
//&&&staticSymbol&&&			{
//&&&staticSymbol&&&     <%
for (GenClass.ChildCreationData childCreationData : classEntry.getValue()) { GenFeature createFeature = childCreationData.createFeature; GenFeature delegatedFeature = childCreationData.delegatedFeature; GenClassifier createClassifier = childCreationData.createClassifier;
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&      <%
if (createFeature.isFeatureMapType()) {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&        <%
if (delegatedFeature.isReferenceType()) { GenClass createClass = (GenClass)createClassifier;
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
//&&&staticSymbol&&&@ start 
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&				newChildDescriptors.add
//&&&staticSymbol&&&					(createChildParameter
//&&&staticSymbol&&&						(<%
//&&&staticSymbol&&&=createFeature.getQualifiedFeatureAccessor()
//&&&staticSymbol&&&%>,
//&&&staticSymbol&&&						 <%
//&&&staticSymbol&&&=genModel.getImportedName("org.eclipse.emf.ecore.util.FeatureMapUtil")
//&&&staticSymbol&&&%>.createEntry
//&&&staticSymbol&&&							(<%
//&&&staticSymbol&&&=delegatedFeature.getQualifiedFeatureAccessor()
//&&&staticSymbol&&&%>,
//&&&staticSymbol&&&          <%
if (createClass.isMapEntry()) { 
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&							 <%
//&&&staticSymbol&&&=createClass.getGenPackage().getQualifiedEFactoryInstanceAccessor()
//&&&staticSymbol&&&%>.create(<%
//&&&staticSymbol&&&=createClass.getQualifiedClassifierAccessor()
//&&&staticSymbol&&&%>))));
//&&&staticSymbol&&&          <%
} else {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&							 <%
//&&&staticSymbol&&&=createClass.getGenPackage().getQualifiedFactoryInstanceAccessor()
//&&&staticSymbol&&&%>.create<%
//&&&staticSymbol&&&=createClass.getName()
//&&&staticSymbol&&&%>())));
//&&&staticSymbol&&&          <%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
//&&&staticSymbol&&&@ end 
//&&&staticSymbol&&&%><%
//ItemProvider/newChildDescriptorsReferenceDelegatedFeature.override.javajetinc
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&        <%
} else { GenDataType createDataType = (GenDataType)createClassifier;
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
//&&&staticSymbol&&&@ start 
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&				newChildDescriptors.add
//&&&staticSymbol&&&					(createChildParameter
//&&&staticSymbol&&&						(<%
//&&&staticSymbol&&&=createFeature.getQualifiedFeatureAccessor()
//&&&staticSymbol&&&%>,
//&&&staticSymbol&&&						 <%
//&&&staticSymbol&&&=genModel.getImportedName("org.eclipse.emf.ecore.util.FeatureMapUtil")
//&&&staticSymbol&&&%>.createEntry
//&&&staticSymbol&&&							(<%
//&&&staticSymbol&&&=delegatedFeature.getQualifiedFeatureAccessor()
//&&&staticSymbol&&&%>,
//&&&staticSymbol&&&          <%
if (delegatedFeature.isEnumBasedType()) {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&							 <%
//&&&staticSymbol&&&=delegatedFeature.getTypeGenEnum().getStaticValue(delegatedFeature.getEcoreFeature().getDefaultValueLiteral())
//&&&staticSymbol&&&%>)));
//&&&staticSymbol&&&          <%
} else if (delegatedFeature.isStringBasedType()) {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&							 <%
//&&&staticSymbol&&&=delegatedFeature.getCreateChildValueLiteral()
//&&&staticSymbol&&&%>)));<%
//&&&staticSymbol&&&=genModel.getNonNLS()
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&          <%
} else { String literal = delegatedFeature.getCreateChildValueLiteral();
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&							 <%
//&&&staticSymbol&&&=createDataType.getGenPackage().getQualifiedEFactoryInstanceAccessor()
//&&&staticSymbol&&&%>.createFromString(<%
//&&&staticSymbol&&&=createDataType.getQualifiedClassifierAccessor()
//&&&staticSymbol&&&%>, <%
//&&&staticSymbol&&&=literal
//&&&staticSymbol&&&%>))));<%
if (literal != null) {
//&&&staticSymbol&&&%><%
//&&&staticSymbol&&&=genModel.getNonNLS()
//&&&staticSymbol&&&%><%
} else {
//&&&staticSymbol&&&%> // TODO: ensure this is a valid literal value<%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&          <%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
//&&&staticSymbol&&&@ end 
//&&&staticSymbol&&&%><%
//ItemProvider/newChildDescriptorsAttributeDelegatedFeature.override.javajetinc
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&        <%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&      <%
} else if (createFeature.isReferenceType()) { GenClass createClass = (GenClass)createClassifier;
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
//&&&staticSymbol&&&@ start 
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&				newChildDescriptors.add
//&&&staticSymbol&&&					(createChildParameter
//&&&staticSymbol&&&						(<%
//&&&staticSymbol&&&=createFeature.getQualifiedFeatureAccessor()
//&&&staticSymbol&&&%>,
//&&&staticSymbol&&&        <%
if (createClass.isMapEntry()) { 
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&						 <%
//&&&staticSymbol&&&=createClass.getGenPackage().getQualifiedEFactoryInstanceAccessor()
//&&&staticSymbol&&&%>.create(<%
//&&&staticSymbol&&&=createClass.getQualifiedClassifierAccessor()
//&&&staticSymbol&&&%>)));
//&&&staticSymbol&&&        <%
} else {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&						 <%
//&&&staticSymbol&&&=createClass.getGenPackage().getQualifiedFactoryInstanceAccessor()
//&&&staticSymbol&&&%>.create<%
//&&&staticSymbol&&&=createClass.getName()
//&&&staticSymbol&&&%>()));
//&&&staticSymbol&&&        <%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
//&&&staticSymbol&&&@ end 
//&&&staticSymbol&&&%><%
//ItemProvider/newChildDescriptorsReferenceFeature.override.javajetinc 
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&      <%
} else { GenDataType createDataType = (GenDataType)createClassifier;
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
//&&&staticSymbol&&&@ start 
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&				newChildDescriptors.add
//&&&staticSymbol&&&					(createChildParameter
//&&&staticSymbol&&&						(<%
//&&&staticSymbol&&&=createFeature.getQualifiedFeatureAccessor()
//&&&staticSymbol&&&%>,
//&&&staticSymbol&&&        <%
if (createFeature.isEnumBasedType()) {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&						 <%
//&&&staticSymbol&&&=createFeature.getTypeGenEnum().getStaticValue(createFeature.getEcoreFeature().getDefaultValueLiteral())
//&&&staticSymbol&&&%>));
//&&&staticSymbol&&&        <%
} else if (createFeature.isStringBasedType()) {
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&						 <%
//&&&staticSymbol&&&=createFeature.getCreateChildValueLiteral()
//&&&staticSymbol&&&%>));<%
//&&&staticSymbol&&&=genModel.getNonNLS()
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&        <%
} else { String literal = createFeature.getCreateChildValueLiteral();
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&						 <%
//&&&staticSymbol&&&=createDataType.getGenPackage().getQualifiedEFactoryInstanceAccessor()
//&&&staticSymbol&&&%>.createFromString(<%
//&&&staticSymbol&&&=createDataType.getQualifiedClassifierAccessor()
//&&&staticSymbol&&&%>, <%
//&&&staticSymbol&&&=literal
//&&&staticSymbol&&&%>)));<%
if (literal != null) {
//&&&staticSymbol&&&%><%
//&&&staticSymbol&&&=genModel.getNonNLS()
//&&&staticSymbol&&&%><%
} else {
//&&&staticSymbol&&&%> // TODO: ensure this is a valid literal value<%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&        <%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
//&&&staticSymbol&&&@ end 
//&&&staticSymbol&&&%><%
//ItemProvider/newChildDescriptorsAttributeFeature.override.javajetinc
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&      <%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&
//&&&staticSymbol&&&     <%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&				return null;
//&&&staticSymbol&&&			}
//&&&staticSymbol&&& 
//&&&staticSymbol&&&     <%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&			/**
//&&&staticSymbol&&&			 * <!-- begin-user-doc -->
//&&&staticSymbol&&&			 * <!-- end-user-doc -->
//&&&staticSymbol&&&			 * @generated
//&&&staticSymbol&&&			 */
//&&&staticSymbol&&&			protected <%
//&&&staticSymbol&&&=genModel.getImportedName("org.eclipse.emf.edit.command.CommandParameter")
//&&&staticSymbol&&&%> createChildParameter(Object feature, Object child)
//&&&staticSymbol&&&			{
//&&&staticSymbol&&&				return new <%
//&&&staticSymbol&&&=genModel.getImportedName("org.eclipse.emf.edit.command.CommandParameter")
//&&&staticSymbol&&&%>(null, feature, child);
//&&&staticSymbol&&&			}
//&&&staticSymbol&&&
//&&&staticSymbol&&&		}
//&&&staticSymbol&&&
//&&&staticSymbol&&&		/**
//&&&staticSymbol&&&		 * <!-- begin-user-doc -->
//&&&staticSymbol&&&		 * <!-- end-user-doc -->
//&&&staticSymbol&&&		 * @generated
//&&&staticSymbol&&&		 */
//&&&staticSymbol&&&		public <%
//&&&staticSymbol&&&=_Collection
//&&&staticSymbol&&&%> getNewChildDescriptors(Object object, <%
//&&&staticSymbol&&&=genModel.getImportedName("org.eclipse.emf.edit.domain.EditingDomain")
//&&&staticSymbol&&&%> editingDomain)
//&&&staticSymbol&&&		{
//&&&staticSymbol&&&			<%
//&&&staticSymbol&&&=_ArrayList
//&&&staticSymbol&&&%> result = new <%
//&&&staticSymbol&&&=_ArrayList
//&&&staticSymbol&&&%>();
//&&&staticSymbol&&&			new CreationSwitch(result, editingDomain).doSwitch((<%
//&&&staticSymbol&&&=genModel.getImportedName("org.eclipse.emf.ecore.EObject")
//&&&staticSymbol&&&%>)object);
//&&&staticSymbol&&&			return result;
//&&&staticSymbol&&&		}
//&&&staticSymbol&&&
//&&&staticSymbol&&&		/**
//&&&staticSymbol&&&		 * <!-- begin-user-doc -->
//&&&staticSymbol&&&		 * <!-- end-user-doc -->
//&&&staticSymbol&&&		 * @generated
//&&&staticSymbol&&&		 */
//&&&staticSymbol&&&		public <%
//&&&staticSymbol&&&=genModel.getImportedName("org.eclipse.emf.common.util.ResourceLocator")
//&&&staticSymbol&&&%> getResourceLocator()
//&&&staticSymbol&&&		{
//&&&staticSymbol&&&			return <%
//&&&staticSymbol&&&=genPackage.getImportedEditPluginClassName()
//&&&staticSymbol&&&%>.INSTANCE;
//&&&staticSymbol&&&		}
//&&&staticSymbol&&&	}
//&&&staticSymbol&&&
//&&&staticSymbol&&&  <%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&<%
}
//&&&staticSymbol&&&%>
//&&&staticSymbol&&&}
//&&&staticSymbol&&&<%
genModel.emitSortedImports();
//&&&staticSymbol&&&%>

}
}