[%import java.util.*;%]
[%import org.eclipse.emf.codegen.ecore.genmodel.*;%]
[%include("../Header.javajetinc");%]
[%include("Editor/addItemProviderFactories.override.javajetinc");%]
[%include("Editor/addItemProviderFactories.insert.javajetinc");%]
[%/**
* Copyright (c) 2002-2010 IBM Corporation and others.
* All rights reserved.   This program and the accompanying materials
* are made available under the terms of the Eclipse Public License v1.0
* which accompanies this distribution, and is available at
* http://www.eclipse.org/legal/epl-v10.html
*
* Contributors:
*   IBM - Initial API and implementation
*/%]
[%var genPackage = argument;
var genModel = genPackage.getGenModel();
/* Trick to import java.util.* without warnings */
Iterator.class.getName();%]
[%String operationMethodName = if (genModel.isRichClientPlatform()) {"run";} else {"execute";};%]
[%var _ArrayListOfObject = "ArrayList" + (if (genModel.useGenerics()) {"<Object>";} else {"";});%]
[%var _ArrayListOfSelectionChangedListener = "ArrayList" + (if (genModel.useGenerics()) {"<ISelectionChangedListener>";} else {"";});%]
[%var _CollectionOfSelectionChangedListener = "Collection" + (if (genModel.useGenerics()) {"<ISelectionChangedListener>";} else {"";});%]
[%var _ArrayListOfResource = "ArrayList" + (if (genModel.useGenerics()) {"<Resource>";} else {"";});%]
[%var _CollectionOfResource = "Collection" + (if (genModel.useGenerics()) {"<Resource>";} else {"";});%]
[%var _MapOfResourceToDiagnostic = "Map" + (if (genModel.useGenerics()) {"<Resource, Diagnostic>";} else {"";});%]
[%var _HashMapOfResourceToBoolean = "HashMap" + (if (genModel.useGenerics()) {"<Resource, Boolean>";} else {"";});%]
[%var _MapOfObjectToObject = "Map" + (if (genModel.useGenerics()) {"<Object, Object>";} else {"";});%]
[%var _HashMapOfObjectToObject = "HashMap" + (if (genModel.useGenerics()) {"<Object, Object>";} else {"";});%]
[%var _LinkedHashMapOfResourceToDiagnostic = "LinkedHashMap" + (if (genModel.useGenerics()) {"<Resource, Diagnostic>";} else {"";});%]
[%var _CollectionOfAnything = "Collection" + (if (genModel.useGenerics()) {"<?>";} else {"";});%]
[%var _ListOfAnything = "List" + (if (genModel.useGenerics()) {"<?>";} else {"";});%]
[%var useExtendedLabelProvider = genModel.isStyleProviders() or genModel.isFontProviders() or genModel.isColorProviders();%]
[%var useStyledLabelProvider = genModel.isStyleProviders();%]
[%var _AdapterFactoryLabelProvider = (if (useStyledLabelProvider) {"AdapterFactoryLabelProvider.StyledLabelProvider";} else {"AdapterFactoryLabelProvider" + (if (genModel.isFontProviders() and genModel.isColorProviders()) {".FontAndColorProvider";} else {genModel.isFontProviders() ? ".FontProvider" : genModel.isColorProviders() ? ".ColorProvider" : "";});});%]
[%String _DelegatingAdapterFactoryLabelProvider = if (useStyledLabelProvider) {genModel.getImportedName("org.eclipse.emf.edit.ui.provider.DelegatingStyledCellLabelProvider") + (if (genModel.isFontProviders() and genModel.isColorProviders()) {".FontAndColorProvider";} else {genModel.isFontProviders() ? ".FontProvider" : genModel.isColorProviders() ? ".ColorProvider" : "";});} else {"";};%]
[%String _DecoratingColumLabelProvider = if (genModel.getDecoration() <> GenDecoration.NONE) {genModel.getImportedName("org.eclipse.emf.edit.ui.provider.DecoratingColumLabelProvider") + (if (useStyledLabelProvider) {".StyledLabelProvider";} else {"";});} else {"";};%]
[%String _DiagnosticDecorator = if (genModel.getDecoration() <> GenDecoration.NONE) {genModel.getImportedName("org.eclipse.emf.edit.ui.provider.DiagnosticDecorator") + (if (useStyledLabelProvider) {".Styled";} else {"";});} else {"";};%]
[%var _ArrayListOfString = "ArrayList" + (if (genModel.useGenerics()) {"<String>";} else {"";});%]
[%var _ListOfString = "List" + (if (genModel.useGenerics()) {"<String>";} else {"";});%]
[%var _ListOfPropertySheetPage = "List" + (if (genModel.useGenerics()) {"<PropertySheetPage>";} else {"";});%]
[%var _ArrayListOfPropertySheetPage = "ArrayList" + (if (genModel.useGenerics()) {"<PropertySheetPage>";} else {"";});%]
package [%=genPackage.getPresentationPackageName()%];
[%if (notgenModel.isRichClientPlatform()) {%]
[%}%]
[%if (notgenModel.isRichClientPlatform()) {%]
[%}%]
[%if (genModel.getRuntimeVersion().getValue() >= GenRuntimeVersion.EMF29_VALUE) {%]
[%}%]
[%if (genPackage.isMultipleEditorPages()) {%]
[%}%]
[%if (genPackage.isMultipleEditorPages()) {%]
[%}%]
[%if (genPackage.isMultipleEditorPages()) {%]
[%}%]
[%if (genModel.getRuntimeVersion().getValue() >= GenRuntimeVersion.EMF29_VALUE) {%]
[%}%]
[%if (genPackage.isMultipleEditorPages()) {%]
[%}%]
[%if (genPackage.isMultipleEditorPages()) {%]
[%}%]
[%if (genPackage.isMultipleEditorPages()) {%]
[%}%]
[%if (notgenModel.isRichClientPlatform() and genModel.getComplianceLevel().getValue() < GenJDKLevel.JDK50) {%]
[%}%]
[%if (notgenModel.isRichClientPlatform()) {%]
[%}%]
[%if (notgenModel.isRichClientPlatform()) {%]
[%}%]
[%if (notgenModel.isRichClientPlatform()) {%]
[%}%]
[%if (genPackage.isMultipleEditorPages()) {%]
[%}%]
[%if (notgenModel.isRichClientPlatform() and genModel.getRuntimeVersion().getValue() < GenRuntimeVersion.EMF23_VALUE) {%]
[%}%]
[%if (notgenModel.isRichClientPlatform()) {%]
[%}%]
[%if (genModel.getRuntimeVersion().getValue() >= GenRuntimeVersion.EMF23_VALUE) {%]
[%}%]
[%if (notgenModel.isRichClientPlatform()) {%]
[%}%]
[%if (genModel.getComplianceLevel().getValue() >= GenJDKLevel.JDK50) {%]
[%}%]
[%genModel.markImportLocation(stringBuffer);%]
/**
* This is an example of a [%=genPackage.getPrefix()%] model editor.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
public class [%=genPackage.getEditorClassName()%]
extends MultiPageEditorPart
implements IEditingDomainProvider, ISelectionProvider, IMenuListener, IViewerProvider[%if (notgenModel.isRichClientPlatform()) {%], IGotoMarker[%}%]
{
[%if (genModel.hasCopyrightField()) {%]
/**
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
public static final [%=genModel.getImportedName("java.lang.String")%] copyright = [%=genModel.getCopyrightFieldLiteral()%];[%=genModel.getNonNLS()%]
[%}%]
[%if (genModel.isRichClientPlatform()) {%]
/**
* The filters for file extensions supported by the editor.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/[%if (genPackage.isGenerateModelWizard()) {%]
public static final [%=_ListOfString%] FILE_EXTENSION_FILTERS = prefixExtensions([%=genPackage.getImportedModelWizardClassName()%].FILE_EXTENSIONS, "*.");[%=genModel.getNonNLS()%]
[%} else {%]
public static final [%=_ListOfString%] FILE_EXTENSION_FILTERS = prefixExtensions([%=genModel.getImportedName("java.util.Arrays")%].asList([%=genPackage.getImportedEditorPluginClassName()%].INSTANCE.getString("_UI_[%=genPackage.getEditorClassName()
%]FilenameExtensions").split("\\s*,\\s*")), "*.");[%=genModel.getNonNLS()%][%=genModel.getNonNLS(2)%][%=genModel.getNonNLS(3)%]
[%}%]
/**
* Returns a new unmodifiable list containing prefixed versions of the extensions in the given list.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
private static [%=_ListOfString%] prefixExtensions([%=_ListOfString%] extensions, String prefix)
{
[%=_ListOfString%] result = new [%=_ArrayListOfString%]();
[%if (genModel.useGenerics()) {%]
for (String extension : extensions)
{
result.add(prefix + extension);
[%} else {%]
for (Iterator iterator = extensions.iterator() ; iterator.hasNext(); )
{
result.add(prefix + (String)iterator.next());
[%}%]
}
return Collections.unmodifiableList(result);
}
[%}%]
/**
* This keeps track of the editing domain that is used to track all changes to the model.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected AdapterFactoryEditingDomain editingDomain;
/**
* This is the one adapter factory used for providing views of the model.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected ComposedAdapterFactory adapterFactory;
/**
* This is the content outline page.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected IContentOutlinePage contentOutlinePage;
/**
* This is a kludge...
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected IStatusLineManager contentOutlineStatusLineManager;
/**
* This is the content outline page's viewer.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected TreeViewer contentOutlineViewer;
/**
* This is the property sheet page.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected [%=_ListOfPropertySheetPage%] propertySheetPages = new [%=_ArrayListOfPropertySheetPage%]();
/**
* This is the viewer that shadows the selection in the content outline.
* The parent relation must be correctly defined for this to work.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected TreeViewer selectionViewer;
[%if (genPackage.isMultipleEditorPages()) {%]
/**
* This inverts the roll of parent and child in the content provider and show parents as a tree.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected TreeViewer parentViewer;
/**
* This shows how a tree view works.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected TreeViewer treeViewer;
/**
* This shows how a list view works.
* A list viewer doesn't support icons.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected ListViewer listViewer;
/**
* This shows how a table view works.
* A table can be used as a list with icons.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected TableViewer tableViewer;
/**
* This shows how a tree view with columns works.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected TreeViewer treeViewerWithColumns;
/**
* This keeps track of the active viewer pane, in the book.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected ViewerPane currentViewerPane;
[%}%]
/**
* This keeps track of the active content viewer, which may be either one of the viewers in the pages or the content outline viewer.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected Viewer currentViewer;
/**
* This listens to which ever viewer is active.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected ISelectionChangedListener selectionChangedListener;
/**
* This keeps track of all the {@link org.eclipse.jface.viewers.ISelectionChangedListener}s that are listening to this editor.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected [%=_CollectionOfSelectionChangedListener%] selectionChangedListeners = new [%=_ArrayListOfSelectionChangedListener%]();
/**
* This keeps track of the selection of the editor as a whole.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected ISelection editorSelection = StructuredSelection.EMPTY;
[%if (notgenModel.isRichClientPlatform()) {%]
/**
* The MarkerHelper is responsible for creating workspace resource markers presented
* in Eclipse's Problems View.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected MarkerHelper markerHelper = new EditUIMarkerHelper();
[%}%]
/**
* This listens for when the outline becomes active
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected IPartListener partListener =
new IPartListener()
{
public void partActivated(IWorkbenchPart p)
{
if (p instanceof ContentOutline)
{
if (((ContentOutline)p).getCurrentPage() == contentOutlinePage)
{
getActionBarContributor().setActiveEditor([%=genPackage.getEditorClassName()%].this);
setCurrentViewer(contentOutlineViewer);
}
}
else if (p instanceof PropertySheet)
{
if (propertySheetPages.contains(((PropertySheet)p).getCurrentPage()))
{
getActionBarContributor().setActiveEditor([%=genPackage.getEditorClassName()%].this);
handleActivate();
}
}
else if (p == [%=genPackage.getEditorClassName()%].this)
{
handleActivate();
}
}
public void partBroughtToTop(IWorkbenchPart p)
{
// Ignore.
}
public void partClosed(IWorkbenchPart p)
{
// Ignore.
}
public void partDeactivated(IWorkbenchPart p)
{
// Ignore.
}
public void partOpened(IWorkbenchPart p)
{
// Ignore.
}
};
/**
* Resources that have been removed since last activation.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected [%=_CollectionOfResource%] removedResources = new [%=_ArrayListOfResource%]();
/**
* Resources that have been changed since last activation.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected [%=_CollectionOfResource%] changedResources = new [%=_ArrayListOfResource%]();
/**
* Resources that have been saved.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected [%=_CollectionOfResource%] savedResources = new [%=_ArrayListOfResource%]();
/**
* Map to store the diagnostic associated with a resource.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected [%=_MapOfResourceToDiagnostic%] resourceToDiagnosticMap = new [%=_LinkedHashMapOfResourceToDiagnostic%]();
/**
* Controls whether the problem indication should be updated.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected boolean updateProblemIndication = true;
/**
* Adapter used to update the problem indication when resources are demanded loaded.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected EContentAdapter problemIndicationAdapter =
new EContentAdapter()
{
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public void notifyChanged(Notification notification)
{
if (notification.getNotifier() instanceof Resource)
{
switch (notification.getFeatureID(Resource.class))
{
case Resource.RESOURCE__IS_LOADED:
case Resource.RESOURCE__ERRORS:
case Resource.RESOURCE__WARNINGS:
{
Resource resource = (Resource)notification.getNotifier();
Diagnostic diagnostic = analyzeResourceProblems(resource, null);
if (diagnostic.getSeverity() != Diagnostic.OK)
{
resourceToDiagnosticMap.put(resource, diagnostic);
}
else
{
resourceToDiagnosticMap.remove(resource);
}
if (updateProblemIndication)
{
getSite().getShell().getDisplay().asyncExec
(new Runnable()
{
public void run()
{
updateProblemIndication();
}
});
}
break;
}
}
}
else
{
super.notifyChanged(notification);
}
}
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
protected void setTarget(Resource target)
{
basicSetTarget(target);
}
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
protected void unsetTarget(Resource target)
{
basicUnsetTarget(target);
resourceToDiagnosticMap.remove(target);
if (updateProblemIndication)
{
getSite().getShell().getDisplay().asyncExec
(new Runnable()
{
public void run()
{
updateProblemIndication();
}
});
}
}
};
[%if (notgenModel.isRichClientPlatform()) {%]
/**
* This listens for workspace changes.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected IResourceChangeListener resourceChangeListener =
new IResourceChangeListener()
{
public void resourceChanged(IResourceChangeEvent event)
{
IResourceDelta delta = event.getDelta();
try
{
class ResourceDeltaVisitor implements IResourceDeltaVisitor
{
protected ResourceSet resourceSet = editingDomain.getResourceSet();
protected [%=_CollectionOfResource%] changedResources = new [%=_ArrayListOfResource%]();
protected [%=_CollectionOfResource%] removedResources = new [%=_ArrayListOfResource%]();
public boolean visit([%if (genModel.getDecoration() <> GenDecoration.NONE) {%]final [%}%]IResourceDelta delta)
{
if (delta.getResource().getType() == IResource.FILE)
{
if (delta.getKind() == IResourceDelta.REMOVED ||
delta.getKind() == IResourceDelta.CHANGED[%if (genModel.getDecoration() = GenDecoration.NONE) {%] && delta.getFlags() != IResourceDelta.MARKERS[%}%])
{
[%if (genModel.getDecoration() <> GenDecoration.NONE) {%]final [%}%]Resource resource = resourceSet.getResource(URI.createPlatformResourceURI(delta.getFullPath().toString(), true), false);
if (resource != null)
{
if (delta.getKind() == IResourceDelta.REMOVED)
{
removedResources.add(resource);
}
[%if (genModel.getDecoration() = GenDecoration.NONE) {%]
else if (!savedResources.remove(resource))
{
changedResources.add(resource);
}
[%} else {%]
else
{
if ((delta.getFlags() & IResourceDelta.MARKERS) != 0)
{
[%=_DiagnosticDecorator%].DiagnosticAdapter.update(resource, markerHelper.getMarkerDiagnostics(resource, (IFile)delta.getResource()));
}
if ((delta.getFlags() & IResourceDelta.CONTENT) != 0)
{
if (!savedResources.remove(resource))
{
changedResources.add(resource);
}
}
}
[%}%]
}
}
return false;
}
return true;
}
public [%=_CollectionOfResource%] getChangedResources()
{
return changedResources;
}
public [%=_CollectionOfResource%] getRemovedResources()
{
return removedResources;
}
}
final ResourceDeltaVisitor visitor = new ResourceDeltaVisitor();
delta.accept(visitor);
if (!visitor.getRemovedResources().isEmpty())
{
getSite().getShell().getDisplay().asyncExec
(new Runnable()
{
public void run()
{
removedResources.addAll(visitor.getRemovedResources());
if (!isDirty())
{
getSite().getPage().closeEditor([%=genPackage.getEditorClassName()%].this, false);
}
}
});
}
if (!visitor.getChangedResources().isEmpty())
{
getSite().getShell().getDisplay().asyncExec
(new Runnable()
{
public void run()
{
changedResources.addAll(visitor.getChangedResources());
if (getSite().getPage().getActiveEditor() == [%=genPackage.getEditorClassName()%].this)
{
handleActivate();
}
}
});
}
}
catch (CoreException exception)
{
[%=genPackage.getImportedEditorPluginClassName()%].INSTANCE.log(exception);
}
}
};
[%}%]
/**
* Handles activation of the editor or it's associated views.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected void handleActivate()
{
// Recompute the read only state.
//
if (editingDomain.getResourceToReadOnlyMap() != null)
{
editingDomain.getResourceToReadOnlyMap().clear();
// Refresh any actions that may become enabled or disabled.
//
setSelection(getSelection());
}
if (!removedResources.isEmpty())
{
if (handleDirtyConflict())
{
getSite().getPage().closeEditor([%=genPackage.getEditorClassName()%].this, false);
}
else
{
removedResources.clear();
changedResources.clear();
savedResources.clear();
}
}
else if (!changedResources.isEmpty())
{
changedResources.removeAll(savedResources);
handleChangedResources();
changedResources.clear();
savedResources.clear();
}
}
/**
* Handles what to do with changed resources on activation.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected void handleChangedResources()
{
if (!changedResources.isEmpty() && (!isDirty() || handleDirtyConflict()))
{
if (isDirty())
{
changedResources.addAll(editingDomain.getResourceSet().getResources());
}
editingDomain.getCommandStack().flush();
updateProblemIndication = false;
[%if (genModel.useGenerics()) {%]
for (Resource resource : changedResources)
[%} else {%]
for (Iterator i = changedResources.iterator(); i.hasNext(); )
[%}%]
{
[%if (notgenModel.useGenerics()) {%]
Resource resource = (Resource)i.next();
[%}%]
if (resource.isLoaded())
{
resource.unload();
try
{
resource.load(Collections.EMPTY_MAP);
}
catch (IOException exception)
{
if (!resourceToDiagnosticMap.containsKey(resource))
{
resourceToDiagnosticMap.put(resource, analyzeResourceProblems(resource, exception));
}
}
}
}
[%if (genModel.getRuntimeVersion().getValue() >= GenRuntimeVersion.EMF24_VALUE) {%]
if (AdapterFactoryEditingDomain.isStale(editorSelection))
{
setSelection(StructuredSelection.EMPTY);
}
[%}%]
updateProblemIndication = true;
updateProblemIndication();
}
}
/**
* Updates the problems indication with the information described in the specified diagnostic.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected void updateProblemIndication()
{
if (updateProblemIndication)
{
BasicDiagnostic diagnostic =
new BasicDiagnostic
(Diagnostic.OK,
"[%=genPackage.getGenModel().getEditorPluginID()%]",[%=genModel.getNonNLS()%]
0,
null,
new Object [] { editingDomain.getResourceSet() });
[%if (genModel.useGenerics()) {%]
for (Diagnostic childDiagnostic : resourceToDiagnosticMap.values())
[%} else {%]
for (Iterator i = resourceToDiagnosticMap.values().iterator(); i.hasNext(); )
[%}%]
{
[%if (notgenModel.useGenerics()) {%]
Diagnostic childDiagnostic = (Diagnostic)i.next();
[%}%]
if (childDiagnostic.getSeverity() != Diagnostic.OK)
{
diagnostic.add(childDiagnostic);
}
}
int lastEditorPage = getPageCount() - 1;
if (lastEditorPage >= 0 && getEditor(lastEditorPage) instanceof ProblemEditorPart)
{
((ProblemEditorPart)getEditor(lastEditorPage)).setDiagnostic(diagnostic);
if (diagnostic.getSeverity() != Diagnostic.OK)
{
setActivePage(lastEditorPage);
}
}
else if (diagnostic.getSeverity() != Diagnostic.OK)
{
ProblemEditorPart problemEditorPart = new ProblemEditorPart();
problemEditorPart.setDiagnostic(diagnostic);
[%if (notgenModel.isRichClientPlatform()) {%]
problemEditorPart.setMarkerHelper(markerHelper);
[%}%]
try
{
addPage(++lastEditorPage, problemEditorPart, getEditorInput());
setPageText(lastEditorPage, problemEditorPart.getPartName());
setActivePage(lastEditorPage);
showTabs();
}
catch (PartInitException exception)
{
[%=genPackage.getImportedEditorPluginClassName()%].INSTANCE.log(exception);
}
}
[%if (notgenModel.isRichClientPlatform()) {%]
if (markerHelper.hasMarkers(editingDomain.getResourceSet()))
{
markerHelper.deleteMarkers(editingDomain.getResourceSet());
if (diagnostic.getSeverity() != Diagnostic.OK)
{
try
{
markerHelper.createMarkers(diagnostic);
}
catch (CoreException exception)
{
[%=genPackage.getImportedEditorPluginClassName()%].INSTANCE.log(exception);
}
}
}
[%}%]
}
}
/**
* Shows a dialog that asks if conflicting changes should be discarded.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected boolean handleDirtyConflict()
{
return
MessageDialog.openQuestion
(getSite().getShell(),
getString("_UI_FileConflict_label"),[%=genModel.getNonNLS()%]
getString("_WARN_FileConflict"));[%=genModel.getNonNLS()%]
}
/**
* This creates a model editor.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
public [%=genPackage.getEditorClassName()%]()
{
super();
initializeEditingDomain();
}
/**
* This sets up the editing domain for the model editor.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected void initializeEditingDomain()
{
// Create an adapter factory that yields item providers.
//
adapterFactory = new ComposedAdapterFactory(ComposedAdapterFactory.Descriptor.Registry.INSTANCE);
adapterFactory.addAdapterFactory(new ResourceItemProviderAdapterFactory());
[%@ start%]
[%for (aGenPackage in genModel.getAllGenPackagesWithClassifiers()){%]
[%if (notaGenPackage.getGenClasses().isEmpty() and aGenPackage.getGenModel().hasEditSupport()) {%]
adapterFactory.addAdapterFactory(new [%=aGenPackage.getImportedItemProviderAdapterFactoryClassName()%]());
[%}%]
[%} %]
[%for (aGenPackage in genModel.getAllUsedGenPackagesWithClassifiers()){%]
[%if (notaGenPackage.getGenClasses().isEmpty() and aGenPackage.getGenModel().hasEditSupport()) {%]
adapterFactory.addAdapterFactory(new [%=aGenPackage.getImportedItemProviderAdapterFactoryClassName()%]());
[%}%]
[%} %]
[%@end%][%//Editor/addItemproviderFactories.override.javajetinc"%]
adapterFactory.addAdapterFactory(new ReflectiveItemProviderAdapterFactory());
// Create the command stack that will notify this editor as commands are executed.
//
BasicCommandStack commandStack = new BasicCommandStack();
// Add a listener to set the most recent command's affected objects to be the selection of the viewer with focus.
//
commandStack.addCommandStackListener
(new CommandStackListener()
{
public void commandStackChanged(final EventObject event)
{
getContainer().getDisplay().asyncExec
(new Runnable()
{
public void run()
{
firePropertyChange(IEditorPart.PROP_DIRTY);
// Try to select the affected objects.
//
Command mostRecentCommand = ((CommandStack)event.getSource()).getMostRecentCommand();
if (mostRecentCommand != null)
{
setSelectionToViewer(mostRecentCommand.getAffectedObjects());
}
for (Iterator[%if (genModel.useGenerics()) {%]<PropertySheetPage>[%}%] i = propertySheetPages.iterator(); i.hasNext(); )
{
PropertySheetPage propertySheetPage = [%if (notgenModel.useGenerics()) {%](PropertySheetPage)[%}%]i.next();
if (propertySheetPage.getControl().isDisposed())
{
i.remove();
}
else
{
propertySheetPage.refresh();
}
}
}
});
}
});
// Create the editing domain with a special command stack.
//
editingDomain = new AdapterFactoryEditingDomain(adapterFactory, commandStack, new [%=_HashMapOfResourceToBoolean%]());
}
/**
* This is here for the listener to be able to call it.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
protected void firePropertyChange(int action)
{
super.firePropertyChange(action);
}
/**
* This sets the selection into whichever viewer is active.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
public void setSelectionToViewer([%=_CollectionOfAnything%] collection)
{
final [%=_CollectionOfAnything%] theSelection = collection;
// Make sure it's okay.
//
if (theSelection != null && !theSelection.isEmpty())
{
Runnable runnable =
new Runnable()
{
public void run()
{
// Try to select the items in the current content viewer of the editor.
//
if (currentViewer != null)
{
currentViewer.setSelection(new StructuredSelection(theSelection.toArray()), true);
}
}
};
getSite().getShell().getDisplay().asyncExec(runnable);
}
}
/**
* This returns the editing domain as required by the {@link IEditingDomainProvider} interface.
* and for supporting {@link org.eclipse.emf.edit.ui.action.CommandAction}.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
public EditingDomain getEditingDomain()
{
return editingDomain;
}
/**
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
public class ReverseAdapterFactoryContentProvider extends AdapterFactoryContentProvider
{
/**
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
public ReverseAdapterFactoryContentProvider(AdapterFactory adapterFactory)
{
super(adapterFactory);
}
/**
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public Object [] getElements(Object object)
{
Object parent = super.getParent(object);
return (parent == null ? Collections.EMPTY_SET : Collections.singleton(parent)).toArray();
}
/**
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public Object [] getChildren(Object object)
{
Object parent = super.getParent(object);
return (parent == null ? Collections.EMPTY_SET : Collections.singleton(parent)).toArray();
}
/**
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public boolean hasChildren(Object object)
{
Object parent = super.getParent(object);
return parent != null;
}
/**
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public Object getParent(Object object)
{
return null;
}
}
[%if (genPackage.isMultipleEditorPages()) {%]
/**
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
public void setCurrentViewerPane(ViewerPane viewerPane)
{
if (currentViewerPane != viewerPane)
{
if (currentViewerPane != null)
{
currentViewerPane.showFocus(false);
}
currentViewerPane = viewerPane;
}
setCurrentViewer(currentViewerPane.getViewer());
}
[%}%]
/**
* This makes sure that one content viewer, either for the current page or the outline view, if it has focus,
* is the current one.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
public void setCurrentViewer(Viewer viewer)
{
// If it is changing...
//
if (currentViewer != viewer)
{
if (selectionChangedListener == null)
{
// Create the listener on demand.
//
selectionChangedListener =
new ISelectionChangedListener()
{
// This just notifies those things that are affected by the section.
//
public void selectionChanged(SelectionChangedEvent selectionChangedEvent)
{
setSelection(selectionChangedEvent.getSelection());
}
};
}
// Stop listening to the old one.
//
if (currentViewer != null)
{
currentViewer.removeSelectionChangedListener(selectionChangedListener);
}
// Start listening to the new one.
//
if (viewer != null)
{
viewer.addSelectionChangedListener(selectionChangedListener);
}
// Remember it.
//
currentViewer = viewer;
// Set the editors selection based on the current viewer's selection.
//
setSelection(currentViewer == null ? StructuredSelection.EMPTY : currentViewer.getSelection());
}
}
/**
* This returns the viewer as required by the {@link IViewerProvider} interface.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
public Viewer getViewer()
{
return currentViewer;
}
/**
* This creates a context menu for the viewer and adds a listener as well registering the menu for extension.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected void createContextMenuFor(StructuredViewer viewer)
{
MenuManager contextMenu = new MenuManager("#PopUp");[%=genModel.getNonNLS()%]
contextMenu.add(new Separator("additions"));[%=genModel.getNonNLS()%]
contextMenu.setRemoveAllWhenShown(true);
contextMenu.addMenuListener(this);
Menu menu= contextMenu.createContextMenu(viewer.getControl());
viewer.getControl().setMenu(menu);
[%if (genModel.getRuntimeVersion().getValue() >= GenRuntimeVersion.EMF23_VALUE) {%]
getSite().registerContextMenu(contextMenu, new UnwrappingSelectionProvider(viewer));
[%} else {%]
getSite().registerContextMenu(contextMenu, viewer);
[%}%]
int dndOperations = DND.DROP_COPY | DND.DROP_MOVE | DND.DROP_LINK;
Transfer[] transfers = new Transfer[] { LocalTransfer.getInstance()[%if (genModel.getRuntimeVersion().getValue() >= GenRuntimeVersion.EMF29_VALUE) {%], LocalSelectionTransfer.getTransfer(), FileTransfer.getInstance()[%}%] };
viewer.addDragSupport(dndOperations, transfers, new ViewerDragAdapter(viewer));
viewer.addDropSupport(dndOperations, transfers, new EditingDomainViewerDropAdapter(editingDomain, viewer));
}
/**
* This is the method called to load a resource into the editing domain's resource set based on the editor's input.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
public void createModel()
{
[%if (genModel.getRuntimeVersion().getValue() >= GenRuntimeVersion.EMF23_VALUE) {%]
URI resourceURI = EditUIUtil.getURI(getEditorInput());
[%} else if (genModel.isRichClientPlatform()) {%]
URI resourceURI = URI.createURI(getEditorInput().getName());
[%} else {%]
// Assumes that the input is a file object.
//
IFileEditorInput modelFile = (IFileEditorInput)getEditorInput();
URI resourceURI = URI.createPlatformResourceURI(modelFile.getFile().getFullPath().toString(), true);
[%}%]
Exception exception = null;
Resource resource = null;
try
{
// Load the resource through the editing domain.
//
resource = editingDomain.getResourceSet().getResource(resourceURI, true);
}
catch (Exception e)
{
exception = e;
resource = editingDomain.getResourceSet().getResource(resourceURI, false);
}
Diagnostic diagnostic = analyzeResourceProblems(resource, exception);
if (diagnostic.getSeverity() != Diagnostic.OK)
{
resourceToDiagnosticMap.put(resource,  analyzeResourceProblems(resource, exception));
}
editingDomain.getResourceSet().eAdapters().add(problemIndicationAdapter);
}
/**
* Returns a diagnostic describing the errors and warnings listed in the resource
* and the specified exception (if any).
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
public Diagnostic analyzeResourceProblems(Resource resource, Exception exception)
{
if (!resource.getErrors().isEmpty() || !resource.getWarnings().isEmpty())
{
BasicDiagnostic basicDiagnostic =
new BasicDiagnostic
(Diagnostic.ERROR,
"[%=genPackage.getGenModel().getEditorPluginID()%]",[%=genModel.getNonNLS()%]
0,
getString("_UI_CreateModelError_message", resource.getURI()),[%=genModel.getNonNLS()%]
new Object [] { exception == null ? (Object)resource : exception });
basicDiagnostic.merge(EcoreUtil.computeDiagnostic(resource, true));
return basicDiagnostic;
}
else if (exception != null)
{
return
new BasicDiagnostic
(Diagnostic.ERROR,
"[%=genPackage.getGenModel().getEditorPluginID()%]",[%=genModel.getNonNLS()%]
0,
getString("_UI_CreateModelError_message", resource.getURI()),[%=genModel.getNonNLS()%]
new Object[] { exception });
}
else
{
return Diagnostic.OK_INSTANCE;
}
}
/**
* This is the method used by the framework to install your own controls.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public void createPages()
{
// Creates the model from the editor input
//
createModel();
// Only creates the other pages if there is something that can be edited
//
if (!getEditingDomain().getResourceSet().getResources().isEmpty())
{
// Create a page for the selection tree view.
//
[%if (genPackage.isMultipleEditorPages()) {%]
{
ViewerPane viewerPane =
new ViewerPane(getSite().getPage(), [%=genPackage.getEditorClassName()%].this)
{
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public Viewer createViewer(Composite composite)
{
Tree tree = new Tree(composite, SWT.MULTI);
TreeViewer newTreeViewer = new TreeViewer(tree);
return newTreeViewer;
}
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public void requestActivation()
{
super.requestActivation();
setCurrentViewerPane(this);
}
};
viewerPane.createControl(getContainer());
selectionViewer = (TreeViewer)viewerPane.getViewer();
selectionViewer.setContentProvider(new AdapterFactoryContentProvider(adapterFactory));
selectionViewer.setLabelProvider([%if (useStyledLabelProvider) {%]new [%=_DelegatingAdapterFactoryLabelProvider%]([%}%][%if (genModel.getDecoration() <> GenDecoration.NONE) {
%]new [%=_DecoratingColumLabelProvider%]([%}%]new [%=_AdapterFactoryLabelProvider%](adapterFactory[%if (useExtendedLabelProvider) {
%], selectionViewer[%}%])[%if (genModel.getDecoration() <> GenDecoration.NONE) {%], new [%=_DiagnosticDecorator%](editingDomain[%if (genModel.getDecoration() = GenDecoration.MANUAL) {
%].getResourceSet()[%}%], selectionViewer[%if (genModel.getDecoration() = GenDecoration.LIVE) {%], [%=genPackage.getImportedEditorPluginClassName()%].getPlugin().getDialogSettings()[%}
%]))[%}%][%if (useStyledLabelProvider) {%])[%}%]);
selectionViewer.setInput(editingDomain.getResourceSet());
selectionViewer.setSelection(new StructuredSelection(editingDomain.getResourceSet().getResources().get(0)), true);
viewerPane.setTitle(editingDomain.getResourceSet());
new AdapterFactoryTreeEditor(selectionViewer.getTree(), adapterFactory);
[%if (genModel.getDecoration() <> GenDecoration.NONE) {%]
new [%=genModel.getImportedName("org.eclipse.emf.common.ui.viewer.ColumnViewerInformationControlToolTipSupport")%](selectionViewer, new [%=_DiagnosticDecorator%].EditingDomainLocationListener(editingDomain, selectionViewer));
[%}%]
createContextMenuFor(selectionViewer);
int pageIndex = addPage(viewerPane.getControl());
setPageText(pageIndex, getString("_UI_SelectionPage_label"));[%=genModel.getNonNLS()%]
}
// Create a page for the parent tree view.
//
{
ViewerPane viewerPane =
new ViewerPane(getSite().getPage(), [%=genPackage.getEditorClassName()%].this)
{
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public Viewer createViewer(Composite composite)
{
Tree tree = new Tree(composite, SWT.MULTI);
TreeViewer newTreeViewer = new TreeViewer(tree);
return newTreeViewer;
}
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public void requestActivation()
{
super.requestActivation();
setCurrentViewerPane(this);
}
};
viewerPane.createControl(getContainer());
parentViewer = (TreeViewer)viewerPane.getViewer();
parentViewer.setAutoExpandLevel(30);
parentViewer.setContentProvider(new ReverseAdapterFactoryContentProvider(adapterFactory));
parentViewer.setLabelProvider([%if (useStyledLabelProvider) {%]new [%=_DelegatingAdapterFactoryLabelProvider%]([%}%]new [%=_AdapterFactoryLabelProvider
%](adapterFactory[%if (useExtendedLabelProvider) {%], parentViewer[%}%])[%if (useStyledLabelProvider) {%])[%}
%]);
createContextMenuFor(parentViewer);
int pageIndex = addPage(viewerPane.getControl());
setPageText(pageIndex, getString("_UI_ParentPage_label"));[%=genModel.getNonNLS()%]
}
// This is the page for the list viewer
//
{
ViewerPane viewerPane =
new ViewerPane(getSite().getPage(), [%=genPackage.getEditorClassName()%].this)
{
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public Viewer createViewer(Composite composite)
{
return new ListViewer(composite);
}
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public void requestActivation()
{
super.requestActivation();
setCurrentViewerPane(this);
}
};
viewerPane.createControl(getContainer());
listViewer = (ListViewer)viewerPane.getViewer();
listViewer.setContentProvider(new AdapterFactoryContentProvider(adapterFactory));
listViewer.setLabelProvider([%if (useStyledLabelProvider) {%]new [%=_DelegatingAdapterFactoryLabelProvider%]([%}%]new [%=_AdapterFactoryLabelProvider
%](adapterFactory[%if (useExtendedLabelProvider) {%], listViewer[%}%])[%if (useStyledLabelProvider) {%])[%}
%]);
createContextMenuFor(listViewer);
int pageIndex = addPage(viewerPane.getControl());
setPageText(pageIndex, getString("_UI_ListPage_label"));[%=genModel.getNonNLS()%]
}
// This is the page for the tree viewer
//
{
ViewerPane viewerPane =
new ViewerPane(getSite().getPage(), [%=genPackage.getEditorClassName()%].this)
{
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public Viewer createViewer(Composite composite)
{
return new TreeViewer(composite);
}
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public void requestActivation()
{
super.requestActivation();
setCurrentViewerPane(this);
}
};
viewerPane.createControl(getContainer());
treeViewer = (TreeViewer)viewerPane.getViewer();
treeViewer.setContentProvider(new AdapterFactoryContentProvider(adapterFactory));
treeViewer.setLabelProvider([%if (useStyledLabelProvider) {%]new [%=_DelegatingAdapterFactoryLabelProvider%]([%}%][%if (genModel.getDecoration() <> GenDecoration.NONE) {
%]new [%=_DecoratingColumLabelProvider%]([%}%]new [%=_AdapterFactoryLabelProvider%](adapterFactory[%if (useExtendedLabelProvider) {
%], treeViewer[%}%])[%if (genModel.getDecoration() <> GenDecoration.NONE) {%], new [%=_DiagnosticDecorator%](editingDomain[%if (genModel.getDecoration() = GenDecoration.MANUAL) {
%].getResourceSet()[%}%], treeViewer))[%}%][%if (useStyledLabelProvider) {%])[%}
%]);
new AdapterFactoryTreeEditor(treeViewer.getTree(), adapterFactory);
[%if (genModel.getDecoration() <> GenDecoration.NONE) {%]
new [%=genModel.getImportedName("org.eclipse.emf.common.ui.viewer.ColumnViewerInformationControlToolTipSupport")%](treeViewer, new [%=_DiagnosticDecorator%].EditingDomainLocationListener(editingDomain, treeViewer));
[%}%]
createContextMenuFor(treeViewer);
int pageIndex = addPage(viewerPane.getControl());
setPageText(pageIndex, getString("_UI_TreePage_label"));[%=genModel.getNonNLS()%]
}
// This is the page for the table viewer.
//
{
ViewerPane viewerPane =
new ViewerPane(getSite().getPage(), [%=genPackage.getEditorClassName()%].this)
{
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public Viewer createViewer(Composite composite)
{
return new TableViewer(composite);
}
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public void requestActivation()
{
super.requestActivation();
setCurrentViewerPane(this);
}
};
viewerPane.createControl(getContainer());
tableViewer = (TableViewer)viewerPane.getViewer();
Table table = tableViewer.getTable();
TableLayout layout = new TableLayout();
table.setLayout(layout);
table.setHeaderVisible(true);
table.setLinesVisible(true);
TableColumn objectColumn = new TableColumn(table, SWT.NONE);
layout.addColumnData(new ColumnWeightData(3, 100, true));
objectColumn.setText(getString("_UI_ObjectColumn_label"));[%=genModel.getNonNLS()%]
objectColumn.setResizable(true);
TableColumn selfColumn = new TableColumn(table, SWT.NONE);
layout.addColumnData(new ColumnWeightData(2, 100, true));
selfColumn.setText(getString("_UI_SelfColumn_label"));[%=genModel.getNonNLS()%]
selfColumn.setResizable(true);
tableViewer.setColumnProperties(new String [] {"a", "b"});[%=genModel.getNonNLS()%][%=genModel.getNonNLS(2)%]
tableViewer.setContentProvider(new AdapterFactoryContentProvider(adapterFactory));
tableViewer.setLabelProvider([%if (useStyledLabelProvider) {%]new [%=_DelegatingAdapterFactoryLabelProvider%]([%}%][%if (genModel.getDecoration() <> GenDecoration.NONE) {
%]new [%=_DecoratingColumLabelProvider%]([%}%]new [%=_AdapterFactoryLabelProvider%](adapterFactory[%if (useExtendedLabelProvider) {
%], tableViewer[%}%])[%if (genModel.getDecoration() <> GenDecoration.NONE) {%], new [%=_DiagnosticDecorator%](editingDomain[%if (genModel.getDecoration() = GenDecoration.MANUAL) {
%].getResourceSet()[%}%], tableViewer[%if (genModel.getDecoration() = GenDecoration.LIVE) {%], [%=genPackage.getImportedEditorPluginClassName()%].getPlugin().getDialogSettings()[%}
%]))[%}%][%if (useStyledLabelProvider) {%])[%}%]);
[%if (genModel.getDecoration() <> GenDecoration.NONE) {%]
new [%=genModel.getImportedName("org.eclipse.emf.common.ui.viewer.ColumnViewerInformationControlToolTipSupport")%](tableViewer, new [%=_DiagnosticDecorator%].EditingDomainLocationListener(editingDomain, tableViewer));
[%}%]
createContextMenuFor(tableViewer);
int pageIndex = addPage(viewerPane.getControl());
setPageText(pageIndex, getString("_UI_TablePage_label"));[%=genModel.getNonNLS()%]
}
// This is the page for the table tree viewer.
//
{
ViewerPane viewerPane =
new ViewerPane(getSite().getPage(), [%=genPackage.getEditorClassName()%].this)
{
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public Viewer createViewer(Composite composite)
{
return new TreeViewer(composite);
}
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public void requestActivation()
{
super.requestActivation();
setCurrentViewerPane(this);
}
};
viewerPane.createControl(getContainer());
treeViewerWithColumns = (TreeViewer)viewerPane.getViewer();
Tree tree = treeViewerWithColumns.getTree();
tree.setLayoutData(new FillLayout());
tree.setHeaderVisible(true);
tree.setLinesVisible(true);
TreeColumn objectColumn = new TreeColumn(tree, SWT.NONE);
objectColumn.setText(getString("_UI_ObjectColumn_label"));[%=genModel.getNonNLS()%]
objectColumn.setResizable(true);
objectColumn.setWidth(250);
TreeColumn selfColumn = new TreeColumn(tree, SWT.NONE);
selfColumn.setText(getString("_UI_SelfColumn_label"));[%=genModel.getNonNLS()%]
selfColumn.setResizable(true);
selfColumn.setWidth(200);
treeViewerWithColumns.setColumnProperties(new String [] {"a", "b"});[%=genModel.getNonNLS()%][%=genModel.getNonNLS(2)%]
treeViewerWithColumns.setContentProvider(new AdapterFactoryContentProvider(adapterFactory));
treeViewerWithColumns.setLabelProvider([%if (useStyledLabelProvider) {%]new [%=_DelegatingAdapterFactoryLabelProvider%]([%}%][%if (genModel.getDecoration() <> GenDecoration.NONE) {
%]new [%=_DecoratingColumLabelProvider%]([%}%]new [%=_AdapterFactoryLabelProvider%](adapterFactory[%if (useExtendedLabelProvider) {
%], treeViewerWithColumns[%}%])[%if (genModel.getDecoration() <> GenDecoration.NONE) {%], new [%=_DiagnosticDecorator%](editingDomain[%if (genModel.getDecoration() = GenDecoration.MANUAL) {
%].getResourceSet()[%}%], treeViewerWithColumns[%if (genModel.getDecoration() = GenDecoration.LIVE) {%], [%=genPackage.getImportedEditorPluginClassName()%].getPlugin().getDialogSettings()[%}
%]))[%}%][%if (useStyledLabelProvider) {%])[%}%]);
[%if (genModel.getDecoration() <> GenDecoration.NONE) {%]
new [%=genModel.getImportedName("org.eclipse.emf.common.ui.viewer.ColumnViewerInformationControlToolTipSupport")%](treeViewerWithColumns, new [%=_DiagnosticDecorator%].EditingDomainLocationListener(editingDomain, treeViewerWithColumns));
[%}%]
createContextMenuFor(treeViewerWithColumns);
int pageIndex = addPage(viewerPane.getControl());
setPageText(pageIndex, getString("_UI_TreeWithColumnsPage_label"));[%=genModel.getNonNLS()%]
}
[%} else {%]
Tree tree = new Tree(getContainer(), SWT.MULTI);
selectionViewer = new TreeViewer(tree);
setCurrentViewer(selectionViewer);
selectionViewer.setContentProvider(new AdapterFactoryContentProvider(adapterFactory));
selectionViewer.setLabelProvider([%if (useStyledLabelProvider) {%]new [%=_DelegatingAdapterFactoryLabelProvider%]([%}%][%if (genModel.getDecoration() <> GenDecoration.NONE) {
%]new [%=_DecoratingColumLabelProvider%]([%}%]new [%=_AdapterFactoryLabelProvider%](adapterFactory[%if (useExtendedLabelProvider) {
%], selectionViewer[%}%])[%if (genModel.getDecoration() <> GenDecoration.NONE) {%], new [%=_DiagnosticDecorator%](editingDomain[%if (genModel.getDecoration() = GenDecoration.MANUAL) {
%].getResourceSet()[%}%], selectionViewer[%if (genModel.getDecoration() = GenDecoration.LIVE) {%], [%=genPackage.getImportedEditorPluginClassName()%].getPlugin().getDialogSettings()[%}
%]))[%}%][%if (useStyledLabelProvider) {%])[%}%]);
selectionViewer.setInput(editingDomain.getResourceSet());
selectionViewer.setSelection(new StructuredSelection(editingDomain.getResourceSet().getResources().get(0)), true);
new AdapterFactoryTreeEditor(selectionViewer.getTree(), adapterFactory);
[%if (genModel.getDecoration() <> GenDecoration.NONE) {%]
new [%=genModel.getImportedName("org.eclipse.emf.common.ui.viewer.ColumnViewerInformationControlToolTipSupport")%](selectionViewer, new [%=_DiagnosticDecorator%].EditingDomainLocationListener(editingDomain, selectionViewer));
[%}%]
createContextMenuFor(selectionViewer);
int pageIndex = addPage(tree);
setPageText(pageIndex, getString("_UI_SelectionPage_label"));[%=genModel.getNonNLS()%]
[%}%]
getSite().getShell().getDisplay().asyncExec
(new Runnable()
{
public void run()
{
setActivePage(0);
}
});
}
// Ensures that this editor will only display the page's tab
// area if there are more than one page
//
getContainer().addControlListener
(new ControlAdapter()
{
boolean guard = false;
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public void controlResized(ControlEvent event)
{
if (!guard)
{
guard = true;
hideTabs();
guard = false;
}
}
});
getSite().getShell().getDisplay().asyncExec
(new Runnable()
{
public void run()
{
updateProblemIndication();
}
});
}
/**
* If there is just one page in the multi-page editor part,
* this hides the single tab at the bottom.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected void hideTabs()
{
if (getPageCount() <= 1)
{
setPageText(0, "");[%=genModel.getNonNLS()%]
if (getContainer() instanceof CTabFolder)
{
((CTabFolder)getContainer()).setTabHeight(1);
Point point = getContainer().getSize();
getContainer().setSize(point.x, point.y + 6);
}
}
}
/**
* If there is more than one page in the multi-page editor part,
* this shows the tabs at the bottom.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected void showTabs()
{
if (getPageCount() > 1)
{
setPageText(0, getString("_UI_SelectionPage_label"));[%=genModel.getNonNLS()%]
if (getContainer() instanceof CTabFolder)
{
((CTabFolder)getContainer()).setTabHeight(SWT.DEFAULT);
Point point = getContainer().getSize();
getContainer().setSize(point.x, point.y - 6);
}
}
}
/**
* This is used to track the active viewer.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
protected void pageChange(int pageIndex)
{
super.pageChange(pageIndex);
if (contentOutlinePage != null)
{
handleContentOutlineSelection(contentOutlinePage.getSelection());
}
}
/**
* This is how the framework determines which interfaces we implement.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
[%if (genModel.useGenerics()) {%]
@SuppressWarnings("[%if (genModel.getRuntimeVersion().getValue() >= GenRuntimeVersion.EMF26_VALUE) {%]rawtypes[%} else {%]unchecked[%}%]")
[%}%]
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public Object getAdapter(Class key)
{
if (key.equals(IContentOutlinePage.class))
{
return showOutlineView() ? getContentOutlinePage() : null;
}
else if (key.equals(IPropertySheetPage.class))
{
return getPropertySheetPage();
}
[%if (notgenModel.isRichClientPlatform()) {%]
else if (key.equals(IGotoMarker.class))
{
return this;
}
[%}%]
else
{
return super.getAdapter(key);
}
}
/**
* This accesses a cached version of the content outliner.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
public IContentOutlinePage getContentOutlinePage()
{
if (contentOutlinePage == null)
{
// The content outline is just a tree.
//
class MyContentOutlinePage extends ContentOutlinePage
{
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public void createControl(Composite parent)
{
super.createControl(parent);
contentOutlineViewer = getTreeViewer();
contentOutlineViewer.addSelectionChangedListener(this);
// Set up the tree viewer.
//
contentOutlineViewer.setContentProvider(new AdapterFactoryContentProvider(adapterFactory));
contentOutlineViewer.setLabelProvider([%if (useStyledLabelProvider) {%]new [%=_DelegatingAdapterFactoryLabelProvider%]([%}%][%if (genModel.getDecoration() <> GenDecoration.NONE) {
%]new [%=_DecoratingColumLabelProvider%]([%}%]new [%=_AdapterFactoryLabelProvider%](adapterFactory[%if (useExtendedLabelProvider) {
%], contentOutlineViewer[%}%])[%if (genModel.getDecoration() <> GenDecoration.NONE) {%], new [%=_DiagnosticDecorator%](editingDomain[%if (genModel.getDecoration() = GenDecoration.MANUAL) {
%].getResourceSet()[%}%], contentOutlineViewer[%if (genModel.getDecoration() = GenDecoration.LIVE) {%], [%=genPackage.getImportedEditorPluginClassName()%].getPlugin().getDialogSettings()[%}
%]))[%}%][%if (useStyledLabelProvider) {%])[%}%]);
contentOutlineViewer.setInput(editingDomain.getResourceSet());
[%if (genModel.getDecoration() <> GenDecoration.NONE) {%]
new [%=genModel.getImportedName("org.eclipse.emf.common.ui.viewer.ColumnViewerInformationControlToolTipSupport")%](contentOutlineViewer, new [%=_DiagnosticDecorator%].EditingDomainLocationListener(editingDomain, contentOutlineViewer));
[%}%]
// Make sure our popups work.
//
createContextMenuFor(contentOutlineViewer);
if (!editingDomain.getResourceSet().getResources().isEmpty())
{
// Select the root object in the view.
//
contentOutlineViewer.setSelection(new StructuredSelection(editingDomain.getResourceSet().getResources().get(0)), true);
}
}
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public void makeContributions(IMenuManager menuManager, IToolBarManager toolBarManager, IStatusLineManager statusLineManager)
{
super.makeContributions(menuManager, toolBarManager, statusLineManager);
contentOutlineStatusLineManager = statusLineManager;
}
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public void setActionBars(IActionBars actionBars)
{
super.setActionBars(actionBars);
getActionBarContributor().shareGlobalActions(this, actionBars);
}
}
contentOutlinePage = new MyContentOutlinePage();
// Listen to selection so that we can handle it is a special way.
//
contentOutlinePage.addSelectionChangedListener
(new ISelectionChangedListener()
{
// This ensures that we handle selections correctly.
//
public void selectionChanged(SelectionChangedEvent event)
{
handleContentOutlineSelection(event.getSelection());
}
});
}
return contentOutlinePage;
}
/**
* This accesses a cached version of the property sheet.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
public IPropertySheetPage getPropertySheetPage()
{
PropertySheetPage propertySheetPage =
new ExtendedPropertySheetPage(editingDomain[%if (genModel.getDecoration() = GenDecoration.MANUAL) {%], ExtendedPropertySheetPage.Decoration.MANUAL[%} else if (genModel.getDecoration() = GenDecoration.LIVE) {%], ExtendedPropertySheetPage.Decoration.LIVE, [%=genPackage.getImportedEditorPluginClassName()%].getPlugin().getDialogSettings()[%}
%])
{
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public void setSelectionToViewer([%=_ListOfAnything%] selection)
{
[%=genPackage.getEditorClassName()%].this.setSelectionToViewer(selection);
[%=genPackage.getEditorClassName()%].this.setFocus();
}
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public void setActionBars(IActionBars actionBars)
{
super.setActionBars(actionBars);
getActionBarContributor().shareGlobalActions(this, actionBars);
}
};
propertySheetPage.setPropertySourceProvider(new AdapterFactoryContentProvider(adapterFactory));
propertySheetPages.add(propertySheetPage);
return propertySheetPage;
}
/**
* This deals with how we want selection in the outliner to affect the other views.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
public void handleContentOutlineSelection(ISelection selection)
{
[%if (genPackage.isMultipleEditorPages()) {%]
if (currentViewerPane != null && !selection.isEmpty() && selection instanceof IStructuredSelection)
[%} else {%]
if (selectionViewer != null && !selection.isEmpty() && selection instanceof IStructuredSelection)
[%}%]
{
Iterator[%if (genModel.useGenerics()) {%]<?>[%}%] selectedElements = ((IStructuredSelection)selection).iterator();
if (selectedElements.hasNext())
{
// Get the first selected element.
//
Object selectedElement = selectedElements.next();
[%if (genPackage.isMultipleEditorPages()) {%]
// If it's the selection viewer, then we want it to select the same selection as this selection.
//
if (currentViewerPane.getViewer() == selectionViewer)
{
[%=_ArrayListOfObject%] selectionList = new [%=_ArrayListOfObject%]();
selectionList.add(selectedElement);
while (selectedElements.hasNext())
{
selectionList.add(selectedElements.next());
}
// Set the selection to the widget.
//
selectionViewer.setSelection(new StructuredSelection(selectionList));
}
else
{
// Set the input to the widget.
//
if (currentViewerPane.getViewer().getInput() != selectedElement)
{
currentViewerPane.getViewer().setInput(selectedElement);
currentViewerPane.setTitle(selectedElement);
}
}
[%} else {%]
[%=_ArrayListOfObject%] selectionList = new [%=_ArrayListOfObject%]();
selectionList.add(selectedElement);
while (selectedElements.hasNext())
{
selectionList.add(selectedElements.next());
}
// Set the selection to the widget.
//
selectionViewer.setSelection(new StructuredSelection(selectionList));
[%}%]
}
}
}
/**
* This is for implementing {@link IEditorPart} and simply tests the command stack.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public boolean isDirty()
{
return ((BasicCommandStack)editingDomain.getCommandStack()).isSaveNeeded();
}
/**
* This is for implementing {@link IEditorPart} and simply saves the model file.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public void doSave(IProgressMonitor progressMonitor)
{
// Save only resources that have actually changed.
//
final [%=_MapOfObjectToObject%] saveOptions = new [%=_HashMapOfObjectToObject%]();
[%if (genModel.getRuntimeVersion().getValue() >= GenRuntimeVersion.EMF23_VALUE) {%]
saveOptions.put(Resource.OPTION_SAVE_ONLY_IF_CHANGED, Resource.OPTION_SAVE_ONLY_IF_CHANGED_MEMORY_BUFFER);
[%}%]
[%if (genModel.getRuntimeVersion().getValue() >= GenRuntimeVersion.EMF29_VALUE) {%]
saveOptions.put(Resource.OPTION_LINE_DELIMITER, Resource.OPTION_LINE_DELIMITER_UNSPECIFIED);
[%}%]
// Do the work within an operation because this is a long running activity that modifies the workbench.
//
{
// This is the method that gets invoked when the operation runs.
//
[%if (notgenModel.isRichClientPlatform() and genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public void [%=operationMethodName%](IProgressMonitor monitor)
{
// Save the resources to the file system.
//
boolean first = true;
[%if (genModel.useGenerics()) {%]
for (Resource resource : editingDomain.getResourceSet().getResources())
[%} else {%]
for (Iterator i = editingDomain.getResourceSet().getResources().iterator(); i.hasNext(); )
[%}%]
{
[%if (notgenModel.useGenerics()) {%]
Resource resource = (Resource)i.next();
[%}%]
if ((first || !resource.getContents().isEmpty() || isPersisted(resource)) && !editingDomain.isReadOnly(resource))
{
try
{
[%if (genModel.getRuntimeVersion().getValue() >= GenRuntimeVersion.EMF24_VALUE) {%]
long timeStamp = resource.getTimeStamp();
resource.save(saveOptions);
if (resource.getTimeStamp() != timeStamp)
{
savedResources.add(resource);
}
[%} else {%]
resource.save(saveOptions);
savedResources.add(resource);
[%}%]
}
catch (Exception exception)
{
resourceToDiagnosticMap.put(resource, analyzeResourceProblems(resource, exception));
}
first = false;
}
}
}
};
updateProblemIndication = false;
try
{
// This runs the options, and shows progress.
//
new ProgressMonitorDialog(getSite().getShell()).run(true, false, operation);
// Refresh the necessary state.
//
((BasicCommandStack)editingDomain.getCommandStack()).saveIsDone();
firePropertyChange(IEditorPart.PROP_DIRTY);
}
catch (Exception exception)
{
// Something went wrong that shouldn't.
//
[%=genPackage.getImportedEditorPluginClassName()%].INSTANCE.log(exception);
}
updateProblemIndication = true;
updateProblemIndication();
}
/**
* This returns whether something has been persisted to the URI of the specified resource.
* The implementation uses the URI converter from the editor's resource set to try to open an input stream.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected boolean isPersisted(Resource resource)
{
boolean result = false;
try
{
InputStream stream = editingDomain.getResourceSet().getURIConverter().createInputStream(resource.getURI());
if (stream != null)
{
result = true;
stream.close();
}
}
catch (IOException e)
{
// Ignore
}
return result;
}
/**
* This always returns true because it is not currently supported.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public boolean isSaveAsAllowed()
{
return true;
}
/**
* This also changes the editor's input.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public void doSaveAs()
{
[%if (genModel.isRichClientPlatform()) {%]
[%if (genModel.isRichAjaxPlatform()) {%]
new [%=genModel.getImportedName("org.eclipse.emf.common.ui.dialogs.ResourceDialog")%](getSite().getShell(), null, SWT.NONE)
{
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
protected boolean isSave()
{
return true;
}
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
protected boolean processResources()
{[%="List" + (if (genModel.useGenerics()) {"<URI>";} else {"";});%]%] uris = getURIs();
if (uris.size() > 0)
{URI uri = [%=if (genModel.useGenerics()) {"";} else {"(URI)";};%]%]uris.get(0);
doSaveAs(uri, new [%=genModel.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%](uri));
return true;
}
else
{
return false;
}
}
}.open();
[%} else {%]
String[] filters = [%if (notgenModel.useGenerics()) {%](String[])[%}%]FILE_EXTENSION_FILTERS.toArray(new String[FILE_EXTENSION_FILTERS.size()]);
String[] files = [%=genModel.getImportedName(genModel.getQualifiedEditorAdvisorClassName())%].openFilePathDialog(getSite().getShell(), [%=genModel.getImportedName("org.eclipse.swt.SWT")%].SAVE, filters);
if (files.length > 0)
{
URI uri = URI.createFileURI(files[0]);
doSaveAs(uri, new [%=genModel.getImportedName("org.eclipse.emf.common.ui.URIEditorInput")%](uri));
}
[%}%]
[%} else {%]
SaveAsDialog saveAsDialog = new SaveAsDialog(getSite().getShell());
saveAsDialog.open();
IPath path = saveAsDialog.getResult();
if (path != null)
{
IFile file = ResourcesPlugin.getWorkspace().getRoot().getFile(path);
if (file != null)
{
doSaveAs(URI.createPlatformResourceURI(file.getFullPath().toString(), true), new FileEditorInput(file));
}
}
[%}%]
}
/**
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected void doSaveAs(URI uri, IEditorInput editorInput)
{
([%if (notgenModel.useGenerics()) {%](Resource)[%}%]editingDomain.getResourceSet().getResources().get(0)).setURI(uri);
setInputWithNotify(editorInput);
setPartName(editorInput.getName());
IProgressMonitor progressMonitor =
getActionBars().getStatusLineManager() != null ?
getActionBars().getStatusLineManager().getProgressMonitor() :
new [%=genModel.getImportedName("org.eclipse.core.runtime.NullProgressMonitor")%]();
doSave(progressMonitor);
}
[%if (notgenModel.isRichClientPlatform()) {%]
/**
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
public void gotoMarker(IMarker marker)
{
[%if (genModel.getRuntimeVersion().getValue() >= GenRuntimeVersion.EMF23_VALUE) {%]
[%=_ListOfAnything%] targetObjects = markerHelper.getTargetObjects(editingDomain, marker);
if (!targetObjects.isEmpty())
{
setSelectionToViewer(targetObjects);
}
[%} else {%]
try
{
if (marker.isSubtypeOf(EValidator.MARKER))
{
String uriAttribute = marker.getAttribute(EValidator.URI_ATTRIBUTE, null);
if (uriAttribute != null)
{
URI uri = URI.createURI(uriAttribute);
EObject eObject = editingDomain.getResourceSet().getEObject(uri, true);
if (eObject != null)
{
setSelectionToViewer(Collections.singleton(editingDomain.getWrapper(eObject)));
}
}
}
}
catch (CoreException exception)
{
[%=genPackage.getImportedEditorPluginClassName()%].INSTANCE.log(exception);
}
[%}%]
}
[%}%]
/**
* This is called during startup.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public void init(IEditorSite site, IEditorInput editorInput)
{
setSite(site);
setInputWithNotify(editorInput);
setPartName(editorInput.getName());
site.setSelectionProvider(this);
site.getPage().addPartListener(partListener);
[%if (notgenModel.isRichClientPlatform()) {%]
ResourcesPlugin.getWorkspace().addResourceChangeListener(resourceChangeListener, IResourceChangeEvent.POST_CHANGE);
[%}%]
}
/**
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public void setFocus()
{
[%if (genPackage.isMultipleEditorPages()) {%]
if (currentViewerPane != null)
{
currentViewerPane.setFocus();
}
else
{
getControl(getActivePage()).setFocus();
}
[%} else {%]
getControl(getActivePage()).setFocus();
[%}%]
}
/**
* This implements {@link org.eclipse.jface.viewers.ISelectionProvider}.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
public void addSelectionChangedListener(ISelectionChangedListener listener)
{
selectionChangedListeners.add(listener);
}
/**
* This implements {@link org.eclipse.jface.viewers.ISelectionProvider}.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
public void removeSelectionChangedListener(ISelectionChangedListener listener)
{
selectionChangedListeners.remove(listener);
}
/**
* This implements {@link org.eclipse.jface.viewers.ISelectionProvider} to return this editor's overall selection.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
public ISelection getSelection()
{
return editorSelection;
}
/**
* This implements {@link org.eclipse.jface.viewers.ISelectionProvider} to set this editor's overall selection.
* Calling this result will notify the listeners.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
public void setSelection(ISelection selection)
{
editorSelection = selection;
[%if (genModel.useGenerics()) {%]
for (ISelectionChangedListener listener : selectionChangedListeners)
[%} else {%]
for (Iterator listeners = selectionChangedListeners.iterator(); listeners.hasNext(); )
[%}%]
{
[%if (notgenModel.useGenerics()) {%]
ISelectionChangedListener listener = (ISelectionChangedListener)listeners.next();
[%}%]
listener.selectionChanged(new SelectionChangedEvent(this, selection));
}
setStatusLineManager(selection);
}
/**
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
public void setStatusLineManager(ISelection selection)
{
IStatusLineManager statusLineManager = currentViewer != null && currentViewer == contentOutlineViewer ?
contentOutlineStatusLineManager : getActionBars().getStatusLineManager();
if (statusLineManager != null)
{
if (selection instanceof IStructuredSelection)
{
[%=_CollectionOfAnything%] collection = ((IStructuredSelection)selection).toList();
switch (collection.size())
{
case 0:
{
statusLineManager.setMessage(getString("_UI_NoObjectSelected"));[%=genModel.getNonNLS()%]
break;
}
case 1:
{
String text = new AdapterFactoryItemDelegator(adapterFactory).getText(collection.iterator().next());
statusLineManager.setMessage(getString("_UI_SingleObjectSelected", text));[%=genModel.getNonNLS()%]
break;
}
default:
{
statusLineManager.setMessage(getString("_UI_MultiObjectSelected", Integer.toString(collection.size())));[%=genModel.getNonNLS()%]
break;
}
}
}
else
{
statusLineManager.setMessage("");[%=genModel.getNonNLS()%]
}
}
}
/**
* This looks up a string in the plugin's plugin.properties file.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
private static String getString(String key)
{
return [%=genPackage.getImportedEditorPluginClassName()%].INSTANCE.getString(key);
}
/**
* This looks up a string in plugin.properties, making a substitution.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
private static String getString(String key, Object s1)
{
return [%=genPackage.getImportedEditorPluginClassName()%].INSTANCE.getString(key, new Object [] { s1 });
}
/**
* This implements {@link org.eclipse.jface.action.IMenuListener} to help fill the context menus with contributions from the Edit menu.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
public void menuAboutToShow(IMenuManager menuManager)
{
((IMenuListener)getEditorSite().getActionBarContributor()).menuAboutToShow(menuManager);
}
/**
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
public EditingDomainActionBarContributor getActionBarContributor()
{
return (EditingDomainActionBarContributor)getEditorSite().getActionBarContributor();
}
/**
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
public IActionBars getActionBars()
{
return getActionBarContributor().getActionBars();
}
/**
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
public AdapterFactory getAdapterFactory()
{
return adapterFactory;
}
/**
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
[%if (genModel.useClassOverrideAnnotation()) {%]
@Override
[%}%]
public void dispose()
{
updateProblemIndication = false;
[%if (notgenModel.isRichClientPlatform()) {%]
ResourcesPlugin.getWorkspace().removeResourceChangeListener(resourceChangeListener);
[%}%]
getSite().getPage().removePartListener(partListener);
adapterFactory.dispose();
if (getActionBarContributor().getActiveEditor() == this)
{
getActionBarContributor().setActiveEditor(null);
}
[%if (genModel.useGenerics()) {%]
for (PropertySheetPage propertySheetPage : propertySheetPages)
[%} else {%]
for (Iterator i = propertySheetPages.iterator(); i.hasNext(); )
[%}%]
{
[%if (notgenModel.useGenerics()) {%]
PropertySheetPage propertySheetPage = (PropertySheetPage)i.next();
[%}%]
propertySheetPage.dispose();
}
if (contentOutlinePage != null)
{
contentOutlinePage.dispose();
}
super.dispose();
}
/**
* Returns whether the outline view should be presented to the user.
* <!-- begin-user-doc -->
* <!-- end-user-doc -->
* @generated
*/
protected boolean showOutlineView()
{
return [%=genPackage.isMultipleEditorPages()%];
}
}
[%genModel.emitSortedImports();%]
}
}
